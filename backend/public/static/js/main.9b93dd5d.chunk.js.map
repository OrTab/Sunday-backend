{"version":3,"sources":["services/httpService.js","services/socketService.js","services/utilService.js","services/userService.js","store/actions/userAction.js","services/boardService.js","store/actions/boardAction.js","assets/img/sunday-logo.svg","cmps/HomeHeader.jsx","cmps/Login.jsx","cmps/SignUp.jsx","assets/img/sunday-icon.svg","cmps/user/UserNotifications.jsx","cmps/MainSideBar.jsx","cmps/SearchInput.jsx","cmps/reuseable-basic-components/Modal.jsx","cmps/ConfirmModal.jsx","cmps/BoardSideBarItem.jsx","cmps/BoardSideBar.jsx","cmps/DatePicker.jsx","cmps/EditableElement.jsx","cmps/Colors.jsx","cmps/Label.jsx","cmps/LabelMenu.jsx","assets/img/ChatBubble.jsx","custom-hooks/useGetUser.js","cmps/members-components/MemberPreview.jsx","cmps/members-components/MemberList.jsx","cmps/TaskMembersModal.jsx","cmps/ProgressBar.jsx","cmps/members-components/MemberForDisplay.jsx","cmps/CardPreview.jsx","cmps/group-preview-components/GroupSortModal.jsx","cmps/group-preview-components/GroupColors.jsx","cmps/group-preview-components/GroupMenu.jsx","cmps/group-preview-components/GroupHeader.jsx","cmps/group-preview-components/GroupPreview.jsx","cmps/FilterOptions.jsx","cmps/BoardFilter.jsx","cmps/BoardMembers.jsx","cmps/board-activities-components/BoardActivitiesPreview.jsx","cmps/board-activities-components/BoardActivitiesList.jsx","cmps/BoardHeader.jsx","cmps/DashBoard.jsx","assets/img/clouds.svg","cmps/NoResultsPlaceholder.jsx","cmps/BoardPreview.jsx","services/cloudinary-service.js","cmps/CardUpdates.jsx","assets/img/Loader.jsx","pages/BoardApp.jsx","assets/img/undrawtask.svg","pages/Home.jsx","cmps/user/GeneralUserInfo.jsx","cmps/user/UpdateProfile.jsx","pages/user/UserProfile.jsx","App.jsx","store/reducers/userReducer.js","store/reducers/boardReducer.js","store/store.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["BASE_URL","axios","Axios","create","withCredentials","httpService","endpoint","data","ajax","a","method","url","res","response","status","window","location","assign","socketService","socket","setup","io","reconnection","on","eventName","cb","off","removeAllListeners","emit","terminate","createSocketService","utilService","delay","ms","Promise","resolve","setTimeout","getRandomInt","makeId","length","txt","possible","i","charAt","Math","floor","random","getNameInitials","name","newName","split","map","word","join","toUpperCase","substring","getRandomPassword","pass","types","counter","currType","randomChar","getNameOfMonth","month","min","max","ceil","userService","login","logout","signup","getUsers","queryStr","getUserById","getUsersById","remove","userId","update","getLoggedinUser","updateNotifications","cleanNotifications","updateReadNotifications","memberToUpdate","notifications","forEach","notification","isRead","users","JSON","stringify","user","_id","updatedUser","_saveLocalUser","userCred","Error","sessionStorage","clear","setItem","parse","getItem","memberId","notificationTxt","id","createdAt","Date","now","byMember","fullname","imgUrl","memberToAdd","setMsg","msg","dispatch","action","type","checkLogin","credentials","logOut","boards","board","updateUserNotifications","boardService","query","removeBoard","getBoardById","addCard","addBoard","addGroup","deleteCard","getBoardIdByIdx","boardIdx","changeBoardTitle","changeCardTitle","changeGroupTitle","updateTaskMembers","member","sign","cardToUpdate","groupId","cards","activityText","boardToUpdate","groupToUpdate","_findGroupById","title","card","members","filter","activity","_createBoardActivity","activities","groups","group","err","changeCardDates","changeCardLabels","deleteLabel","changeGroupColor","removeGroup","changeBoardMemebrs","memberData","changeGroupIdx","changeCardIdx","sortByTitle","groupsToSort","sort","group1","group2","toLowerCase","sortByDate","sortCardByDate","cardsToSort","card1","card2","card1Sort","card2Sort","dueDate","endDate","startDate","getTime","addCardLabel","updateActivities","isClear","deepSearchByKey","object","originalKey","matches","Array","isArray","arrayItem","Object","keys","key","hasOwnProperty","obj","push","getKeyById","source","target","sourceSet","Set","findTarget","has","add","value","addCardUpdate","boardId","filterBy","boardTitle","boardToAdd","createdBy","_createDefaultGroup","find","cardTitle","_createCard","newGroup","unshift","cardId","newTitle","color","style","result","groupTitle","prevTitle","label","labelType","labelGroup","text","currLabel","isActive","labelId","cardDetails","cardUpdate","updates","groupsToUpdate","console","log","dates","priority","statuses","priorities","cardOrder","setBoard","loadBoards","setBoardMembers","cardToDelete","detailsForUpdateCard","_HomeHeader","state","isNavOpen","isScrolled","scrollTop","handleScroll","excludedRoutes","scrollY","indexOf","props","pathname","document","querySelector","className","toggleMobileNav","setState","addEventListener","this","removeEventListener","ref","scrollRef","onScroll","to","src","sunday","alt","onClick","activeClassName","username","password","path","history","Component","mapDispatchToProps","HomeHeader","withRouter","connect","userReducer","_Login","loggedinUser","loginCred","loginHandleChange","ev","prevState","doLogin","preventDefault","onSubmit","TextField","margin","required","placeholder","autoFocus","onChange","Login","boardReducer","_SignUp","signupCred","email","confirm","isShowPassword","onSignUp","onTogglePassword","validate","values","errors","test","onGetRandomPassword","inputType","enableReinitialize","initialValues","autoComplete","as","Visibility","VisibilityOff","SignUp","useStyles","makeStyles","theme","typography","padding","spacing","UserNotifications","onCleanNotifications","onUpdateNotifications","React","useState","anchorEl","setAnchorEl","open","Boolean","undefined","data-tip","data-for","aria-describedby","event","currentTarget","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","idx","moment","from","place","effect","MainSideBar","isShowUserNotification","onToggleUserNotifications","onLogOut","sundayIcon","SearchInput","onSetFilter","placeHolder","wrapper","position","top","bottom","right","left","backgroundColor","zIndex","box","textAlign","width","breakpoints","up","content","Modal","withCloseBtn","children","classes","modalRoot","getElementById","modalTemplate","stopPropagation","IconButton","ReactDOM","createPortal","deleteBtn","boxShadow","ConfirmModal","arg","close","onApprove","isInDeleteMode","isDeleteLabel","Button","variant","startIcon","BoardSideBarItem","onDeleteBoard","setIsInDeleteMode","currBoardId","useSelector","BoardSideBar","isAddBoard","isDelete","onInputChange","onAddBoard","toggleEditBoard","DatePicker","closeDatePicker","changeDates","setDates","focusedInput","setFocusedInput","isStartDateOnly","setIsStartDateOnly","useEffect","_d","handleChange","isOutsideRange","onDatesChange","hideKeyboardShortcutsPanel","onFocusChange","EditableElement","isEdit","textContent","checkKey","onChangeTitle","onKeyDown","onBlur","contentEditable","suppressContentEditableWarning","spellCheck","onInput","Colors","onChangeColor","hexValue","Label","onDeleteLabel","setCurrLabel","isEditLabel","LabelMenu","isOpen","isAddLabelOpen","isColorPalletteOpen","showAddLabelError","newLabel","isShowOpt","chosenLabel","createRef","toggleMenu","toggleAddNewLabel","toggleAddLabelError","onSaveLabel","setNewLabelColor","addLabel","onAddLabel","handleInput","toggleEdit","labels","isLast","isScroll","ClickAwayListener","onClickAway","current","ChatBubble","enableBackground","height","viewBox","xmlns","d","useGetUser","setUser","isFetch","setIsFetch","fetchUser","MemberPreview","onUpdateMembers","MemberList","TaskMembersModal","availableBoardMembers","cardMembers","changeTaskMembers","onCloseModal","ProgressBar","groupColor","onOpenPicker","startMonth","getMonth","startDay","getDate","startDateForDisplay","endMonth","endDay","endDateForDisplay","dateRange","start","today","end","timePassed","round","abs","range","checkDueDate","MemberForDisplay","isFilterDisplay","CardPreview","areMembersShown","setAreMembersShown","isDateShown","setIsDateShown","boardMembers","loggedInUser","useDispatch","onDeleteCard","onChangeTaskMembers","userToUpdate","onChangeCardDates","detailsForDeleteLabel","onChangeCardLabels","detailsForUpdateCardLabel","onAddCardLabel","workingDays","useMemo","days","diff","boardMember","cardMemberId","cardMembersForDisplay","slice","draggableId","index","provided","snapshot","draggableProps","dragHandleProps","innerRef","enableAdding","GroupSortModal","onSetGroupSort","MenuItem","ListItemIcon","MenuList","GroupColors","onCloseAll","handleClose","GroupMenu","onShowConfirmModal","onChangeGroupColor","GroupHeader","onRemoveGroup","isMenuOnHover","setIsMenuOnHover","onMouseEnter","onMouseLeave","border","droppableId","direction","droppableProps","isDragging","getCardOrder","GroupPreview","onAddCard","onChangeGroupTitle","onDrag","setCardTitle","setPlaceholder","sortGroupBy","setSortGroupBy","timeoutId","useRef","clearTimeout","handleAddCardSubmit","replace","groupForDisplay","groupCopy","countStatus","statusCount","reduce","acc","count","sortBy","isCombineEnabled","background","FilterOptions","onSetFilterLabels","isSelect","BoardFilter","membersId","statusesForDisplay","priorityForDisplay","isShowMenuFilter","isMobileFiltersOpen","handelChange","cleanInput","copyFilter","onCloseFilterMenu","includes","newLabels","copyStatusForDispaly","copyPriorityForDisplay","onGetMember","newMmbers","toggleMobileFilters","setStatuses","prevProps","currGroup","boardFilter","offsetParent","Fragment","BoardMembers","onCloseModalMembers","setUsers","usersNotInBoard","onChangeBoardMemebrs","updatedUsers","tagName","BoardActivitiesPreview","BoardActivitiesList","activityFilterText","BoardHeader","onAddGroup","isShowBoardMember","setIsShowBoardMember","isShowActivities","setIsShowActivities","setActivityFilterText","toggleMembersModal","showActivities","activitiesForDisplay","filterRegex","RegExp","unReadActivities","boardOwner","DashBoard","cardsByMembers","all","then","cardsMembers","prevText","prevName","arr","copy","splice","options","colors","chart","stacked","toolbar","show","zoom","enabled","responsive","plotOptions","bar","xaxis","categories","yaxis","lines","legend","offsetY","fill","opacity","series","cardStatusByMember","NoResultsPlaceholder","clouds","maxWidth","fontWeight","BoardPreview","setFilterBy","isShowDashboard","setIsShowDashboard","cardToAdd","filteredBoard","boardCopy","filteredCards","changeBoardView","onDragEnd","destination","newGroups","draggedGroup","sourceGroup","destinationGroup","newCards","newCard","newIdx","findIndex","sourceGroupCards","newSourceGroup","destinationGroupCards","newCardToPaste","newDestinationGroup","sourceIdx","destinationIdx","groupIdx","sourceColumn","onDragStart","cloudinaryService","uploadImg","UPLOAD_URL","formData","FormData","append","post","_CardUpdates","isLoading","getCard","copyUpdate","files","onImageUploadBefore","onAddUpdate","regex","match","params","htmlUpdates","toDateString","onDrop","handleDrop","setDefaultStyle","setOptions","buttonList","imageResizing","setContents","dangerouslySetInnerHTML","__html","targetValue","CardUpdates","Loader","xmlnsXlink","display","shapeRendering","preserveAspectRatio","transform","attributeName","repeatCount","keyTimes","dur","fillOpacity","BoardApp","innerWidth","isBoardSideBarOpen","setIsBoardSideBarOpen","setBoardTitle","setAction","initializeBoardMembers","initializeBoards","updateBoardsInStore","updateUserInStore","updateBoards","getBoardsForDisplay","render","exact","Home","undrawtask","GeneralUserInfo","getActiveCards","activeCard","activeCards","borderLeft","href","_UpdateProfile","dateofbirth","tel","triggerMsg","validatePhoneNumber","userCopy","onTriggerMsg","onUpdateProfile","updateUser","aria-required","htmlFor","newUserInfo","UpdateProfile","UserProfile","setBoards","isMyProfile","setIsMyProfile","App","component","initialState","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","hostname","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9b93dd5d.chunk.js","sourcesContent":["import Axios from 'axios'\r\n\r\nconst BASE_URL = process.env.NODE_ENV === 'production'\r\n    ? '/api/'\r\n    : '//localhost:3030/api/'\r\n\r\n\r\nvar axios = Axios.create({\r\n    withCredentials: true\r\n})\r\n\r\nexport const httpService = {\r\n    get(endpoint, data) {\r\n        return ajax(endpoint, 'GET', data)\r\n    },\r\n    post(endpoint, data) {\r\n        return ajax(endpoint, 'POST', data)\r\n    },\r\n    put(endpoint, data) {\r\n        return ajax(endpoint, 'PUT', data)\r\n    },\r\n    delete(endpoint, data) {\r\n        return ajax(endpoint, 'DELETE', data)\r\n    }\r\n}\r\n\r\nasync function ajax(endpoint, method = 'get', data = null) {\r\n    try {\r\n        const res = await axios({\r\n            url: `${BASE_URL}${endpoint}`,\r\n            method,\r\n            data\r\n        })\r\n        return res.data\r\n    } catch (err) {\r\n        // console.log(`Had Issues ${method}ing to the backend, endpoint: ${endpoint}, with data: ${data}`)\r\n        // console.dir(err)\r\n        if (err.response && err.response.status === 401) {\r\n            window.location.assign('/#/login')\r\n        }\r\n        \r\n        throw err\r\n    }\r\n}","import io from 'socket.io-client'\r\nimport { httpService } from './httpService'\r\n\r\n\r\nconst baseUrl = (process.env.NODE_ENV === 'production') ? 'https://sunday-app-2021.herokuapp.com/' : '//localhost:3030'\r\nexport const socketService = createSocketService()\r\n// export const socketService = createDummySocketService()\r\n\r\n\r\nvar socketIsReady = false;\r\n// socketService.setup()\r\n\r\n\r\nfunction createSocketService() {\r\n  var socket = null;\r\n  const socketService = {\r\n    setup() {\r\n      if (socket) return\r\n      socket = io(baseUrl, { reconnection: false })\r\n      socketIsReady = true;\r\n    },\r\n    on(eventName, cb) {\r\n      if (!socket) socketService.setup()\r\n      socket.on(eventName, cb)\r\n    },\r\n    off(eventName, cb = null) {\r\n      if (!socket) socketService.setup()\r\n      if (!cb) socket.removeAllListeners(eventName)\r\n      else socket.off(eventName, cb)\r\n    },\r\n    emit(eventName, data) {\r\n      if (!socket) socketService.setup()\r\n      socket.emit(eventName, data)\r\n    },\r\n    terminate() {\r\n      socket = null\r\n      socketIsReady = false\r\n    }\r\n  }\r\n  return socketService\r\n}\r\n\r\n// eslint-disable-next-line\r\nfunction createDummySocketService() {\r\n  var listenersMap = {}\r\n  const socketService = {\r\n    listenersMap,\r\n    setup() {\r\n      listenersMap = {}\r\n    },\r\n    terminate() {\r\n      this.setup()\r\n    },\r\n    on(eventName, cb) {\r\n      listenersMap[eventName] = [...(listenersMap[eventName]) || [], cb]\r\n    },\r\n    off(eventName, cb) {\r\n      if (!listenersMap[eventName]) return\r\n      if (!cb) delete listenersMap[eventName]\r\n      else listenersMap[eventName] = listenersMap[eventName].filter(l => l !== cb)\r\n    },\r\n    emit(eventName, data) {\r\n      if (!listenersMap[eventName]) return\r\n      listenersMap[eventName].forEach(listener => {\r\n        listener(data)\r\n      })\r\n    },\r\n    debugMsg() {\r\n      this.emit('chat addMsg', { from: 'Someone', txt: 'Aha it worked!' })\r\n    },\r\n  }\r\n  return socketService\r\n}\r\n\r\n\r\n\r\n","\r\nexport const utilService = {\r\n    delay,\r\n    getRandomInt,\r\n    makeId,\r\n    getNameInitials,\r\n    getRandomPassword,\r\n    getNameOfMonth,\r\n\r\n\r\n}\r\n\r\nfunction delay(ms = 1500) {\r\n    return new Promise(resolve => {\r\n        setTimeout(resolve, ms)\r\n    })\r\n}\r\n\r\nfunction getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\r\n}\r\nfunction getNameInitials(name) {\r\n    name = name.split(' ');\r\n    const newName = name.map(word => word[0]).join('').toUpperCase();\r\n    return newName.length > 3 ? newName.substring(0, 3) : newName;\r\n\r\n}\r\nfunction makeId(length = 5) {\r\n    var txt = '';\r\n    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    for (var i = 0; i < length; i++) {\r\n        txt += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n    return txt;\r\n}\r\n\r\n\r\nfunction getNameOfMonth(month) {\r\n    switch (month) {\r\n        case 0:\r\n            return 'Jan'\r\n        case 1:\r\n            return 'Feb'\r\n        case 2:\r\n            return 'Mar'\r\n        case 3:\r\n            return 'Apr'\r\n        case 4:\r\n            return 'May'\r\n        case 5:\r\n            return 'Jun'\r\n        case 6:\r\n            return 'Jul'\r\n        case 7:\r\n            return 'Aug'\r\n        case 8:\r\n            return 'Sep'\r\n        case 9:\r\n            return 'Oct'\r\n        case 10:\r\n            return 'Nov'\r\n        case 11:\r\n            return 'Dec'\r\n        default:\r\n            return ''\r\n    }\r\n\r\n\r\n}\r\n\r\nfunction getRandomPassword() {\r\n\r\n    var pass = ''\r\n    var types = ['ABCDEFGHIJKLMNOPKRSTUVWXYZ', 'abcdefghijklmnopkrstuvwxyz', '@#$%^&*!', '1234567890']\r\n    var counter = 0\r\n    for (var i = 0; i < 8; i++) {\r\n        var currType = types[counter]\r\n        var randomChar = getRandomInt(0, currType.length)\r\n        pass += currType.charAt(randomChar)\r\n        counter++\r\n        if (counter === 3) counter = 0\r\n    }\r\n    return pass\r\n}\r\n","import { httpService } from './httpService'\r\nimport { utilService } from './utilService'\r\nexport const userService = {\r\n    login,\r\n    logout,\r\n    signup,\r\n    getUsers,\r\n    getUserById,\r\n    getUsersById,\r\n    remove,\r\n    update,\r\n    getLoggedinUser,\r\n    updateNotifications,\r\n    cleanNotifications,\r\n    updateReadNotifications,\r\n}\r\nfunction getUsers(txt) {\r\n    var queryStr = (!txt) ? '' : `?fullname=${txt}`\r\n    return httpService.get(`user${queryStr}`)\r\n}\r\nasync function getUserById(userId) {\r\n    return await httpService.get(`user/${userId}`)\r\n\r\n}\r\nasync function getUsersById(users) {\r\n    users = JSON.stringify(users)\r\n    return await httpService.get(`user/boardMembers?usersId=${users}`)\r\n}\r\n\r\nfunction remove(userId) {\r\n    return httpService.delete(`user/${userId}`)\r\n}\r\nasync function update(user) {\r\n    const updatedUser = await httpService.put(`user/${user._id}`, user)\r\n    // Handle case in which admin updates other user's details\r\n    if (getLoggedinUser()._id === updatedUser._id) _saveLocalUser(updatedUser)\r\n    return updatedUser\r\n}\r\n\r\nasync function login(userCred) {\r\n    try {\r\n        const user = await httpService.post('auth/login', userCred)\r\n        if (user) return _saveLocalUser(user)\r\n    } catch (err) {\r\n        throw new Error('Could\\'nt find users')\r\n    }\r\n}\r\n\r\n\r\n\r\nasync function signup(userCred) {\r\n    const user = await httpService.post('auth/signup', userCred)\r\n    return _saveLocalUser(user)\r\n}\r\n\r\nasync function logout() {\r\n    await httpService.post('auth/logout')\r\n    sessionStorage.clear()\r\n    return\r\n}\r\nfunction _saveLocalUser(user) {\r\n    sessionStorage.setItem('loggedinUser', JSON.stringify(user))\r\n    return user\r\n}\r\n\r\nfunction getLoggedinUser() {\r\n    return JSON.parse(sessionStorage.getItem('loggedinUser'))\r\n}\r\n\r\nasync function updateNotifications({ memberId, notificationTxt, user }) {\r\n    const notification = {\r\n        id: utilService.makeId(),\r\n        notificationTxt,\r\n        isRead: false,\r\n        createdAt: Date.now(),\r\n        byMember: {\r\n            _id: user._id,\r\n            fullname: user.fullname,\r\n            imgUrl: user.imgUrl ? user.imgUrl : null\r\n        }\r\n    }\r\n\r\n    const memberToAdd = await getUserById(memberId)\r\n    if (!memberToAdd.notifications) {\r\n        memberToAdd.notifications = [notification]\r\n    } else {\r\n        memberToAdd.notifications = [notification, ...memberToAdd.notifications]\r\n    }\r\n    return await update(memberToAdd)\r\n}\r\n\r\nfunction updateReadNotifications(memberToUpdate) {\r\n    if (memberToUpdate.notifications) {\r\n        memberToUpdate.notifications.forEach(notification => notification.isRead = true);\r\n        return update(memberToUpdate)\r\n    }\r\n}\r\n\r\nasync function cleanNotifications(user) {\r\n    const memberToUpdate = await getUserById(user._id)\r\n    memberToUpdate.notifications = []\r\n    return update(memberToUpdate)\r\n}","import { socketService } from '../../services/socketService.js';\r\nimport { userService } from '../../services/userService.js'\r\nexport function query(txt) {\r\n    return async () => {\r\n        try {\r\n            return await userService.getUsers(txt)\r\n        } catch (err) {\r\n        }\r\n    }\r\n}\r\n\r\nexport function setMsg(msg) {\r\n    return (dispatch) => {\r\n        let action = {\r\n            type: 'SET_MSG',\r\n            msg\r\n        }\r\n        dispatch(action)\r\n        setTimeout(() => {\r\n            action = {\r\n                type: 'CLEAR_MSG'\r\n            }\r\n            dispatch(action)\r\n        }, 2000)\r\n    }\r\n}\r\nexport function clearMsg() {\r\n    return (dispatch) => {\r\n        const action = {\r\n            type: 'CLEAR_MSG',\r\n        }\r\n        dispatch(action)\r\n    }\r\n}\r\nexport function checkLogin(credentials) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const user = await userService.login(credentials)\r\n            const action = {\r\n                type: 'SET_LOGGED_IN_USER',\r\n                user\r\n            }\r\n            dispatch(action)\r\n            return user\r\n        } catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function signup(credentials) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const user = await userService.signup(credentials)\r\n            const action = {\r\n                type: 'SET_LOGGED_IN_USER',\r\n                user\r\n            }\r\n            dispatch(action)\r\n            return user\r\n        } catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function logOut() {\r\n    return async (dispatch) => {\r\n        try {\r\n            await userService.logout()\r\n            dispatch({ type: 'LOG_OUT' })\r\n            dispatch({ type: 'SET_BOARDS', boards: [] })\r\n            dispatch({ type: 'SET_CURR_BOARD', board: null })\r\n        } catch (err) {\r\n        }\r\n    }\r\n}\r\nexport function updateUser(newUserInfo) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const user = await userService.update(newUserInfo)\r\n            const action = {\r\n                type: 'SET_LOGGED_IN_USER',\r\n                user\r\n            }\r\n            dispatch(action)\r\n            return user\r\n        } catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function updateUserNotifications(user) {\r\n    return (dispatch) => {\r\n        const action = {\r\n            type: 'SET_LOGGED_IN_USER',\r\n            user\r\n        }\r\n        dispatch(action)\r\n    }\r\n}\r\nexport function cleanNotifications(user) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const userToUpdate = await userService.cleanNotifications(user)\r\n            const action = {\r\n                type: 'SET_LOGGED_IN_USER',\r\n                user: userToUpdate\r\n            }\r\n            dispatch(action)\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n}\r\nexport function updateReadNotifications(user) {\r\n    return async () => {\r\n        try {\r\n            const userToUpdate = await userService.updateReadNotifications(user)\r\n            return (dispatch) => {\r\n                const action = {\r\n                    type: 'SET_LOGGED_IN_USER',\r\n                    user: userToUpdate\r\n                }\r\n                dispatch(action)\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n}\r\n\r\n","import { utilService } from '../services/utilService.js'\r\nimport { httpService } from './httpService.js';\r\n\r\n\r\nexport const boardService = {\r\n    query,\r\n    removeBoard,\r\n    getBoardById,\r\n    addCard,\r\n    addBoard,\r\n    addGroup,\r\n    deleteCard,\r\n    getBoardIdByIdx,\r\n    changeBoardTitle,\r\n    changeCardTitle,\r\n    changeGroupTitle,\r\n    updateTaskMembers,\r\n    changeCardDates,\r\n    changeCardLabels,\r\n    deleteLabel,\r\n    changeGroupColor,\r\n    removeGroup,\r\n    changeBoardMemebrs,\r\n    changeGroupIdx,\r\n    changeCardIdx,\r\n    sortByTitle,\r\n    sortByDate,\r\n    sortCardByDate,\r\n    addCardLabel,\r\n    updateActivities,\r\n    deepSearchByKey,\r\n    getKeyById,\r\n    addCardUpdate,\r\n\r\n}\r\n\r\n\r\nfunction getKeyById(source, target) {\r\n\r\n    const sourceSet = new Set()\r\n    return findTarget(source, target)\r\n\r\n    function findTarget(source, target) {\r\n\r\n\r\n        if (!source) {\r\n            sourceSet.clear()\r\n            return\r\n        }\r\n\r\n        if (sourceSet.has(source)) {\r\n\r\n            sourceSet.clear()\r\n            return\r\n        }\r\n\r\n        sourceSet.add(source)\r\n\r\n        if (Array.isArray(source)) {\r\n            for (let arrayItem of source) {\r\n                const value = findTarget(arrayItem, target);\r\n                if (value) return value\r\n            }\r\n        } else if (typeof source === 'object') {\r\n            for (let key of Object.keys(source)) {\r\n                if (source[key] === target) {\r\n                    return source\r\n                } else if (typeof source[key] === 'object' || Array.isArray(source[key])) {\r\n                    const value = findTarget(source[key], target)\r\n                    if (value) return value\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\nfunction deepSearchByKey(object, originalKey, matches = []) {\r\n\r\n    if (object !== null) {\r\n        if (Array.isArray(object)) {\r\n            for (let arrayItem of object) {\r\n                deepSearchByKey(arrayItem, originalKey, matches);\r\n            }\r\n        } else if (typeof object === 'object') {\r\n\r\n            for (let key of Object.keys(object)) {\r\n                if (key === 'groups') {\r\n                    deepSearchByKey(object[key], originalKey, matches);\r\n\r\n                } else if (key === 'cards' && object.hasOwnProperty('cards')) {\r\n                    object[key].forEach(obj => {\r\n                        if (obj._id === originalKey) matches.push(object)\r\n                    })\r\n                } else {\r\n                    deepSearchByKey(object[key], originalKey, matches);\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    return matches;\r\n}\r\n\r\n\r\n\r\n\r\nasync function query(userId) {\r\n\r\n    try {\r\n        var queryStr = (!userId) ? '' : `?userId=${userId}`\r\n        return httpService.get(`board${queryStr}`)\r\n    } catch (err) {\r\n        throw new Error('couldn\\'t find boards')\r\n    }\r\n}\r\n\r\nasync function getBoardById(boardId, filterBy) {\r\n    try {\r\n        return httpService.get(`board/${boardId}`)\r\n    } catch (err) {\r\n        throw new Error('couldn\\'t find board')\r\n    }\r\n}\r\nasync function removeBoard(boardId) {\r\n    return httpService.delete(`board/${boardId}`)\r\n    // return await storageService.remove('boards', boardId)\r\n}\r\n\r\nfunction getBoardIdByIdx(boardIdx, boards) {\r\n    const currBoardId = (!boardIdx && boards.length) ? boards[1]?._id : boards[boardIdx - 1]?._id\r\n    return currBoardId\r\n}\r\n\r\n\r\n\r\nasync function addBoard(boardTitle, userId) {\r\n    try {\r\n        const boardToAdd = {\r\n            title: boardTitle,\r\n            createdBy: userId,\r\n            members: [userId],\r\n            activities: [],\r\n            groups: [_createDefaultGroup(userId)]\r\n        }\r\n        // return await storageService.post('boards', boardToAdd)\r\n        return httpService.post('board', boardToAdd)\r\n    } catch (err) {\r\n        throw err\r\n\r\n    }\r\n}\r\n//TODO: use recursion func\r\nfunction _findGroupById(board, groupId) {\r\n    const group = board.groups.find(group => groupId === group.id)\r\n    return group\r\n}\r\n\r\nasync function addCard({ board, groupId, cardTitle, user }) {\r\n    try {\r\n        const boardToUpdate = { ...board }\r\n        const groupToUpdate = _findGroupById(boardToUpdate, groupId)\r\n        const activityText = `added a new card : ${cardTitle}, to group : ${groupToUpdate.title}`\r\n        const activity = _createBoardActivity(user, activityText)\r\n        boardToUpdate.activities = [activity, ...boardToUpdate.activities]\r\n        // groupToUpdate.cards.push(_createCard(cardTitle, user._id))\r\n        groupToUpdate.cards = [...groupToUpdate.cards, (_createCard(cardTitle, user._id))]\r\n        boardToUpdate.groups = boardToUpdate.groups.map(group => group.id === groupToUpdate.id ? groupToUpdate : group)\r\n        httpService.put('board', boardToUpdate)\r\n        return boardToUpdate\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n\r\n}\r\n\r\nasync function addGroup(board, user) {\r\n    try {\r\n        const boardToUpdate = { ...board }\r\n        const activityText = `added a new group`\r\n        const activity = _createBoardActivity(user, activityText)\r\n        boardToUpdate.activities = [activity, ...boardToUpdate.activities]\r\n        const newGroup = _createDefaultGroup(user._id);\r\n        boardToUpdate.groups.unshift(newGroup)\r\n        httpService.put('board', boardToUpdate)\r\n        return boardToUpdate\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nasync function deleteCard({ board, groupId, cardId, user }) {\r\n    try {\r\n        const boardToUpdate = { ...board }\r\n        const groupToUpdate = _findGroupById(boardToUpdate, groupId)\r\n        const activityText = `deleted a card in group : ${groupToUpdate.title}`\r\n        const activity = _createBoardActivity(user, activityText)\r\n        boardToUpdate.activities = [activity, ...boardToUpdate.activities]\r\n\r\n        groupToUpdate.cards = groupToUpdate.cards.filter(card => card.id !== cardId)\r\n        boardToUpdate.groups = boardToUpdate.groups.map(group => group.id === groupToUpdate.id ? groupToUpdate : group)\r\n        httpService.put('board', boardToUpdate)\r\n        return boardToUpdate\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nasync function changeBoardTitle(newTitle, board, user) {\r\n\r\n    const boardToUpdate = { ...board }\r\n    const activityText = `changed board title from '${boardToUpdate.title}' to '${newTitle}'`\r\n    const activity = _createBoardActivity(user, activityText)\r\n    boardToUpdate.activities = [activity, ...boardToUpdate.activities]\r\n    boardToUpdate.title = newTitle\r\n    httpService.put('board', boardToUpdate)\r\n    return boardToUpdate\r\n}\r\n\r\nfunction sortByTitle(groupsToSort) {\r\n    groupsToSort.sort((group1, group2) => {\r\n        if (group1.title.toLowerCase() > group2.title.toLowerCase()) return 1\r\n        else if (group1.title.toLowerCase() < group2.title.toLowerCase()) return -1;\r\n        else return 0;\r\n    })\r\n    return groupsToSort\r\n}\r\n\r\nfunction sortByDate(groupsToSort) {\r\n    groupsToSort.sort((group1, group2) => {\r\n        return group2.createdAt - group1.createdAt\r\n    })\r\n    return groupsToSort\r\n}\r\n\r\nfunction sortCardByDate(cards) {\r\n    let cardsToSort = JSON.parse(JSON.stringify(cards))\r\n    cardsToSort = cardsToSort.sort((card1, card2) => {\r\n        var card1Sort;\r\n        var card2Sort;\r\n        if (card1.dueDate.endDate) {\r\n            card1Sort = card1.dueDate.endDate\r\n        } else card1Sort = card1.dueDate.startDate ? card1.dueDate.startDate : card1.createdAt\r\n        if (card2.dueDate.endDate) {\r\n            card2Sort = card2.dueDate.endDate\r\n        } else card2Sort = card2.dueDate.startDate ? card2.dueDate.startDate : card2.createdAt\r\n\r\n        return new Date(card1Sort).getTime() - new Date(card2Sort).getTime()\r\n\r\n    })\r\n    return cardsToSort\r\n}\r\n\r\nasync function changeGroupColor(color, board, groupId) {\r\n    try {\r\n\r\n        const boardToUpdate = { ...board }\r\n        const groups = boardToUpdate.groups.map(group => {\r\n            if (group.id === groupId) {\r\n                group.style.color = color\r\n                return group\r\n            } else return group\r\n        })\r\n        boardToUpdate.groups = groups\r\n        httpService.put('board', boardToUpdate)\r\n        return boardToUpdate\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nasync function removeGroup(board, groupToUpdate, user) {\r\n    try {\r\n        const boardToUpdate = { ...board }\r\n        const activityText = `removed group ${groupToUpdate.title}`\r\n        const activity = _createBoardActivity(user, activityText)\r\n        boardToUpdate.activities = [activity, ...boardToUpdate.activities]\r\n\r\n        const groups = boardToUpdate.groups.filter(group => group.id !== groupToUpdate.id)\r\n        boardToUpdate.groups = groups\r\n        httpService.put('board', boardToUpdate)\r\n        return boardToUpdate\r\n\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n\r\n}\r\n\r\nasync function changeGroupIdx(board, result) {\r\n    try {\r\n\r\n        // console.log(board);\r\n        // const sourceGroup = boardToUpdate.groups[source.index]\r\n        // boardToUpdate.groups[source.index] = boardToUpdate.groups[destination.index]\r\n        // boardToUpdate.groups[destination.index] = sourceGroup\r\n        // console.log(boardToUpdate.groups);\r\n        return await httpService.put('board', board)\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nasync function changeCardIdx(boardToUpdate, result) {\r\n\r\n    try {\r\n        return httpService.put('board', boardToUpdate)\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\n\r\nasync function changeGroupTitle({ board, groupId, groupTitle, user }) {\r\n    try {\r\n        const boardToUpdate = { ...board }\r\n        let prevTitle = ''\r\n\r\n        const groups = boardToUpdate.groups.map(group => {\r\n            if (group.id === groupId) {\r\n                prevTitle = group.title\r\n                group.title = groupTitle\r\n                return group\r\n            } else return group\r\n        })\r\n        boardToUpdate.groups = groups\r\n        const activityText = `changed group title from ${prevTitle} to ${groupTitle}`\r\n        const activity = _createBoardActivity(user, activityText)\r\n        boardToUpdate.activities = [activity, ...boardToUpdate.activities]\r\n        httpService.put('board', boardToUpdate)\r\n        return boardToUpdate\r\n    } catch (err) {\r\n        // console.log(err);\r\n    }\r\n}\r\n\r\nfunction updateTaskMembers(member, sign, board, cardToUpdate, groupId, user) {\r\n    try {\r\n        const boardToUpdate = { ...board }\r\n        const groupToUpdate = _findGroupById(boardToUpdate, groupId)\r\n        // const member = boardToUpdate.members.find(memberId => memberId === memberIdToUpdate)\r\n        let cards;\r\n        let activityText;\r\n        let notificationTxt;\r\n\r\n        if (sign === 'remove') {\r\n            activityText = `removed ${member._id === user._id ? 'yourself' : member.fullname} from card '${cardToUpdate.title}' `\r\n            if (member._id !== user._id) notificationTxt = `${user.fullname} removed you from card '${cardToUpdate.title}' in group : ${groupToUpdate.title}`\r\n            cards = groupToUpdate.cards.map(card => {\r\n                if (cardToUpdate.id === card.id) {\r\n                    const members = card.members.filter(memberId => memberId !== member._id)\r\n                    card.members = members\r\n                    return card\r\n                } else return card\r\n            })\r\n        }\r\n        else {\r\n            activityText = `added ${member._id === user._id ? 'yourself' : member.fullname} to card '${cardToUpdate.title}'`\r\n            if (member._id !== user._id) notificationTxt = `${user.fullname} added you to card '${cardToUpdate.title}' in group : ${groupToUpdate.title}`\r\n            cards = groupToUpdate.cards.map(card => {\r\n                if (cardToUpdate.id === card.id) {\r\n                    const members = [...card.members, member._id]\r\n                    card.members = members\r\n                    return card\r\n                } else return card\r\n            })\r\n        }\r\n\r\n        const activity = _createBoardActivity(user, activityText)\r\n        boardToUpdate.activities = [activity, ...boardToUpdate.activities]\r\n        groupToUpdate.cards = cards\r\n        const groups = boardToUpdate.groups.map(group => group.id === groupToUpdate.id ? groupToUpdate : group)\r\n        boardToUpdate.groups = groups\r\n        httpService.put('board', boardToUpdate)\r\n        if (notificationTxt) return { memberId: member._id, notificationTxt, user, boardToUpdate }\r\n        else return { boardToUpdate }\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n\r\n}\r\n// TODO: think of better way to update the UI , also in changeCardTaskMembers\r\nfunction changeBoardMemebrs(memberData, board, type, user) {\r\n    const boardToUpdate = { ...board }\r\n    var activityText\r\n    var notificationTxt\r\n\r\n    if (type === 'remove') {\r\n        if (memberData._id !== user._id) notificationTxt = `${user.fullname} removed you from '${board.title}' `\r\n        activityText = `removed ${memberData.fullname} from this board`\r\n        boardToUpdate.members = boardToUpdate.members.filter(memberId => memberId !== memberData._id)\r\n        boardToUpdate.groups = boardToUpdate.groups.map(group => {\r\n            group.cards = group.cards.map(card => {\r\n                card.members = card.members.filter(memberId => memberId !== memberData._id);\r\n                return card\r\n            })\r\n            return group;\r\n        })\r\n\r\n    } else {\r\n        activityText = `added ${memberData.fullname} to this board`\r\n        if (memberData._id !== user._id) notificationTxt = `${user.fullname} add you to '${board.title}'`\r\n        boardToUpdate.members = [...boardToUpdate.members, memberData._id];\r\n    }\r\n    const activity = _createBoardActivity(user, activityText)\r\n    boardToUpdate.activities = [activity, ...boardToUpdate.activities]\r\n    httpService.put('board', boardToUpdate)\r\n    if (notificationTxt) return { memberId: memberData._id, notificationTxt, user, boardToUpdate }\r\n    return { boardToUpdate }\r\n}\r\n\r\nasync function changeCardLabels({ board, cardToUpdate, groupId, label, labelType, user, labelGroup }) {\r\n    try {\r\n        const boardToUpdate = { ...board }\r\n        const groupToUpdate = _findGroupById(boardToUpdate, groupId)\r\n        const activityText = `updated ${labelType} in card '${cardToUpdate.title}' from '${cardToUpdate[labelType].text}' to '${label.text}'`\r\n        const activity = _createBoardActivity(user, activityText)\r\n        boardToUpdate.activities = [activity, ...boardToUpdate.activities]\r\n        groupToUpdate[labelGroup].forEach(currLabel => {\r\n            if (currLabel.id === label.id) currLabel.isActive = true\r\n            if (cardToUpdate[labelType].id === currLabel.id) currLabel.isActive = false\r\n        })\r\n        groupToUpdate.cards.forEach(card => {\r\n            if (cardToUpdate.id === card.id) {\r\n                card[labelType] = label;\r\n                return card\r\n            } else return card\r\n        })\r\n        const groups = boardToUpdate.groups.map(group => group.id === groupToUpdate.id ? groupToUpdate : group)\r\n        boardToUpdate.groups = groups\r\n        httpService.put('board', boardToUpdate)\r\n        return boardToUpdate\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\n\r\nasync function deleteLabel({ board, groupId, labelId, labelGroup, cardDetails }) {\r\n    try {\r\n        const boardToUpdate = JSON.parse(JSON.stringify(board))\r\n        boardToUpdate.groups = boardToUpdate.groups.map(group => {\r\n            if (group.id === groupId) {\r\n                group[labelGroup] = group[labelGroup].filter(label => label.id !== labelId)\r\n                group.cards = group.cards.map(card => {\r\n                    if (card[cardDetails.labelType].id === labelId) {\r\n                        card[cardDetails.labelType] = cardDetails.label\r\n                        return card\r\n                    } else return card\r\n                })\r\n\r\n                return group\r\n            } else return group\r\n        })\r\n        httpService.put('board', boardToUpdate)\r\n        return boardToUpdate\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\n\r\n\r\nasync function addCardUpdate(cardUpdate, board, cardToUpdate) {\r\n    try {\r\n        cardUpdate.createdAt = Date.now()\r\n        if (cardToUpdate.updates) {\r\n            cardToUpdate.updates.unshift(cardUpdate)\r\n        } else cardToUpdate.updates = [...cardUpdate]\r\n\r\n        const boardToUpdate = JSON.parse(JSON.stringify(board))\r\n        const groupsToUpdate = boardToUpdate.groups.map(group => {\r\n            const cards = group.cards.map(card => {\r\n                if (card.id === cardToUpdate.id) return cardToUpdate\r\n                else return card\r\n            })\r\n            group.cards = cards\r\n            return group\r\n        })\r\n\r\n        boardToUpdate.groups = groupsToUpdate\r\n        return httpService.put('board', boardToUpdate)\r\n\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\n\r\nasync function addCardLabel(board, groupId, label, labelGroup) {\r\n    try {\r\n        const boardToUpdate = { ...board }\r\n        boardToUpdate.groups = boardToUpdate.groups.map(group => {\r\n            if (group.id === groupId) {\r\n                group[labelGroup] = [...group[labelGroup], { ...label }];\r\n                return group;\r\n            } else return group;\r\n        })\r\n        httpService.put('board', boardToUpdate)\r\n        return boardToUpdate\r\n\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nasync function changeCardTitle({ board, groupId, cardToUpdate, cardTitle, user }) {\r\n    try {\r\n        const boardToUpdate = { ...board }\r\n        const groupToUpdate = _findGroupById(boardToUpdate, groupId)\r\n        const activityText = `changed card title from ${cardToUpdate.title} to ${cardTitle}`\r\n        const activity = _createBoardActivity(user, activityText)\r\n        boardToUpdate.activities = [activity, ...boardToUpdate.activities]\r\n\r\n        groupToUpdate.cards = groupToUpdate.cards.map(card => {\r\n            if (card.id === cardToUpdate.id) {\r\n                card.title = cardTitle\r\n                return card\r\n            } else return card\r\n        })\r\n        boardToUpdate.groups = boardToUpdate.groups.map(group => group.id === groupToUpdate.id ? groupToUpdate : group)\r\n        return httpService.put('board', boardToUpdate)\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n\r\n}\r\n\r\nasync function changeCardDates(dates, board, groupId, cardToUpdate, user) {\r\n\r\n    const boardToUpdate = JSON.parse(JSON.stringify(board))\r\n    const groupToUpdate = _findGroupById(boardToUpdate, groupId)\r\n    const activityText = `updated dates in card '${cardToUpdate.title}'`\r\n    const activity = _createBoardActivity(user, activityText)\r\n    boardToUpdate.activities = [activity, ...boardToUpdate.activities]\r\n\r\n    const cards = groupToUpdate.cards.map(card => {\r\n        if (card.id === cardToUpdate.id) {\r\n            card.dueDate = dates\r\n            return card\r\n        } else return card\r\n    })\r\n    groupToUpdate.cards = cards\r\n    const groups = boardToUpdate.groups.map(group => group.id === groupToUpdate.id ? groupToUpdate : group)\r\n    boardToUpdate.groups = groups\r\n    httpService.put('board', boardToUpdate)\r\n    return boardToUpdate\r\n}\r\n\r\nfunction updateActivities(board, isClear) {\r\n    const boardToUpdate = JSON.parse(JSON.stringify(board))\r\n    if (isClear) boardToUpdate.activities = []\r\n    else boardToUpdate.activities.forEach(activity => activity.isRead = true)\r\n    return httpService.put('board', boardToUpdate)\r\n}\r\n\r\n\r\nfunction _createBoardActivity(user, txt) {\r\n    return {\r\n        id: utilService.makeId(),\r\n        txt,\r\n        isRead: false,\r\n        createdAt: Date.now(),\r\n        byMember: user._id\r\n    }\r\n\r\n}\r\n\r\nfunction _createCard(cardTitle, userId) {\r\n    return {\r\n        id: utilService.makeId(),\r\n        title: cardTitle,\r\n        updates: [],\r\n        members: [userId],\r\n        status:\r\n            { text: 'No status yet', color: '#cccccc', id: utilService.makeId() },\r\n        priority:\r\n            { text: 'Set priority', color: '#cccccc', id: utilService.makeId() },\r\n        createdAt: Date.now(),\r\n        dueDate: {\r\n            startDate: '',\r\n            endDate: ''\r\n        },\r\n        createdBy: userId\r\n    }\r\n}\r\n\r\nfunction _createDefaultGroup(userId) {\r\n    return {\r\n        id: utilService.makeId(),\r\n        title: \"New group\",\r\n        createdBy: userId,\r\n        createdAt: Date.now(),\r\n        statuses: [\r\n            { text: 'Done', color: '#00ca72', id: utilService.makeId(), isActive: false },\r\n            { text: 'Stuck', color: '#fb275d', id: utilService.makeId(), isActive: false },\r\n            { text: 'Working on it', color: '#ffcc00', id: utilService.makeId(), isActive: false }\r\n        ],\r\n        priorities: [\r\n            { text: 'Low', color: '#6bf1b9', id: utilService.makeId(), isActive: false },\r\n            { text: 'Medium', color: '#6b97f1', id: utilService.makeId(), isActive: false },\r\n            { text: 'High', color: '#ff812f', id: utilService.makeId(), isActive: false },\r\n            { text: 'Urgent', color: '#ff2f2f', id: utilService.makeId(), isActive: false }\r\n        ],\r\n        cardOrder: ['members', 'status', 'date', 'workingDays', 'priority'],\r\n        cards: [\r\n            _createCard('New item', userId)\r\n        ],\r\n        style: { color: \"#0085ff\" }\r\n    }\r\n}","import { boardService } from \"../../services/boardService\"\r\nimport { socketService } from \"../../services/socketService\"\r\nimport { userService } from \"../../services/userService\"\r\n\r\n\r\nconst setBoard = (dispatch, board) => dispatch({ type: 'SET_CURR_BOARD', board })\r\n\r\nexport function loadBoards(userId) {\r\n    return async dispatch => {\r\n        try {\r\n            const boards = await boardService.query(userId)\r\n            const action = {\r\n                type: 'SET_BOARDS',\r\n                boards\r\n            }\r\n            dispatch(action)\r\n            return boards\r\n        } catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\nexport function changeBoardTitle(newTitle, board, user) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const boardToUpdate = await boardService.changeBoardTitle(newTitle, board, user)\r\n            const action = {\r\n                type: 'UPDATE_BOARDS',\r\n                board: boardToUpdate\r\n            }\r\n            dispatch(action)\r\n        } catch (err) {\r\n            const action = {\r\n                type: 'UPDATE_BOARDS',\r\n                board\r\n            }\r\n            dispatch(action)\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function removeBoard(boardId) {\r\n    return async (dispatch) => {\r\n        try {\r\n            await boardService.removeBoard(boardId)\r\n            const action = {\r\n                type: 'REMOVE_BOARD',\r\n                boardId\r\n            }\r\n            dispatch(action)\r\n        } catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function updateBoards(board) {\r\n    return (dispatch) => {\r\n        const action = {\r\n            type: 'UPDATE_BOARDS',\r\n            board\r\n        }\r\n        dispatch(action)\r\n    }\r\n}\r\n\r\nexport function getBoardById(boardId) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const board = await boardService.getBoardById(boardId)\r\n            const action = {\r\n                type: 'SET_CURR_BOARD',\r\n                board\r\n            }\r\n            dispatch(action)\r\n            return board\r\n        } catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function addCard(cardToAdd) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const board = await boardService.addCard(cardToAdd)\r\n            const action = {\r\n                type: 'UPDATE_BOARDS',\r\n                board\r\n            }\r\n            dispatch(action)\r\n        } catch (err) {\r\n            const action = {\r\n                type: 'UPDATE_BOARDS',\r\n                board: cardToAdd.board\r\n            }\r\n            dispatch(action)\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function addGroup(board, user) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const boardToUpdate = await boardService.addGroup(board, user)\r\n            const action = {\r\n                type: 'UPDATE_BOARDS',\r\n                board: boardToUpdate\r\n            }\r\n            dispatch(action)\r\n        } catch (err) {\r\n            const action = {\r\n                type: 'UPDATE_BOARDS',\r\n                board\r\n            }\r\n            dispatch(action)\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function addBoard(boardTitle, userId) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const board = await boardService.addBoard(boardTitle, userId)\r\n            const action = {\r\n                type: 'ADD_BOARD',\r\n                board\r\n            }\r\n            dispatch(action)\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n}\r\n\r\nexport function setBoardMembers(members) {\r\n    return dispatch => {\r\n        try {\r\n            dispatch({ type: 'SET_BOARD_MEMBERS', members })\r\n        } catch (err) {\r\n\r\n        }\r\n    }\r\n}\r\n\r\n//TODO: FIX\r\nexport function changeGroupIdx(board, result) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const action = {\r\n                type: 'SET_CURR_BOARD',\r\n                board\r\n            }\r\n            dispatch(action)\r\n            await boardService.changeGroupIdx(board, result)\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n}\r\nexport function changeCardIdx(board, result) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const action = {\r\n                type: 'SET_CURR_BOARD',\r\n                board\r\n            }\r\n            dispatch(action)\r\n            await boardService.changeCardIdx(board)\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n}\r\nexport function deleteCard(cardToDelete) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const boardToUpdate = await boardService.deleteCard(cardToDelete)\r\n            const action = {\r\n                type: 'SET_CURR_BOARD',\r\n                board: boardToUpdate\r\n            }\r\n            dispatch(action)\r\n        } catch (err) {\r\n            const action = {\r\n                type: 'SET_CURR_BOARD',\r\n                board: cardToDelete.board\r\n            }\r\n            dispatch(action)\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function changeBoardMemebrs(memberData, board, type, user) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const notification = await boardService.changeBoardMemebrs(memberData, board, type, user)\r\n            const { boardToUpdate } = notification\r\n            setBoard(dispatch, boardToUpdate)\r\n            const userToUpdate = await userService.updateNotifications(notification)\r\n            socketService.emit('onUpdateUser', userToUpdate)\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n}\r\nexport function removeGroup(board, group, user) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const boardToUpdate = await boardService.removeGroup(board, group, user)\r\n            const action = {\r\n                type: 'SET_CURR_BOARD',\r\n                board: boardToUpdate\r\n            }\r\n            dispatch(action)\r\n        } catch (err) {\r\n            const action = {\r\n                type: 'SET_CURR_BOARD',\r\n                board\r\n            }\r\n            dispatch(action)\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function changeCardLabels(detailsForUpdateCardLabel) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const boardToUpdate = await boardService.changeCardLabels(detailsForUpdateCardLabel)\r\n            setBoard(dispatch, boardToUpdate)\r\n        } catch (err) {\r\n            setBoard(dispatch, detailsForUpdateCardLabel.board)\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function addCardLabel(board, groupId, label, labelGroup) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const boardToUpdate = await boardService.addCardLabel(board, groupId, label, labelGroup)\r\n            const action = {\r\n                type: 'SET_CURR_BOARD',\r\n                board: boardToUpdate\r\n            }\r\n            dispatch(action)\r\n        } catch (err) {\r\n            const action = {\r\n                type: 'SET_CURR_BOARD',\r\n                board\r\n            }\r\n            dispatch(action)\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function changeCardTitle(detailsForUpdateCard) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const boardToUpdate = await boardService.changeCardTitle(detailsForUpdateCard)\r\n            setBoard(dispatch, boardToUpdate)\r\n        } catch (err) {\r\n            setBoard(dispatch, detailsForUpdateCard.board)\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport function deleteLabel(detailsForDeleteLabel) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const boardToUpdate = await boardService.deleteLabel(detailsForDeleteLabel)\r\n            setBoard(dispatch, boardToUpdate)\r\n        } catch (err) {\r\n            setBoard(dispatch, detailsForDeleteLabel.board)\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function changeGroupColor(color, board, groupId) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const boardToUpdate = await boardService.changeGroupColor(color, board, groupId)\r\n            const action = {\r\n                type: 'SET_CURR_BOARD',\r\n                board: boardToUpdate\r\n            }\r\n            dispatch(action)\r\n        } catch (err) {\r\n            const action = {\r\n                type: 'SET_CURR_BOARD',\r\n                board\r\n            }\r\n            dispatch(action)\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function changeGroupTitle(groupToUpdate) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const board = await boardService.changeGroupTitle(groupToUpdate)\r\n            const action = {\r\n                type: 'SET_CURR_BOARD',\r\n                board\r\n            }\r\n            dispatch(action)\r\n        } catch (err) {\r\n            const action = {\r\n                type: 'SET_CURR_BOARD',\r\n                board: groupToUpdate.board\r\n            }\r\n            dispatch(action)\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function changeTaskMembers(member, sign, board, card, groupId, user) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const notification = await boardService.updateTaskMembers(member, sign, board, card, groupId, user)\r\n            const { boardToUpdate, notificationTxt } = notification\r\n            setBoard(dispatch, boardToUpdate)\r\n            if (notificationTxt) {\r\n                const userToUpdate = await userService.updateNotifications(notification)\r\n                socketService.emit('onUpdateUser', userToUpdate)\r\n            }\r\n\r\n        } catch (err) {\r\n        }\r\n    }\r\n}\r\nexport function changeCardDates(dates, board, groupId, card, user) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const boardToUpdate = await boardService.changeCardDates(dates, board, groupId, card, user)\r\n            const action = {\r\n                type: 'SET_CURR_BOARD',\r\n                board: boardToUpdate\r\n            }\r\n            dispatch(action)\r\n        } catch (err) {\r\n            const action = {\r\n                type: 'SET_CURR_BOARD',\r\n                board\r\n            }\r\n            dispatch(action)\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function getKeyById(object, targetValue) {\r\n    return async () => {\r\n        try {\r\n            return boardService.getKeyById(object, targetValue)\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n}\r\nexport function addCardUpdate(cardUpdate, board, card) {\r\n    return async () => {\r\n        try {\r\n            return await boardService.addCardUpdate(cardUpdate, board, card)\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n}\r\nexport function dragStart() {\r\n    return (dispatch) => {\r\n        const action = {\r\n            type: 'ON_DRAG'\r\n        }\r\n        dispatch(action)\r\n    }\r\n}\r\nexport function dragEnd() {\r\n    return (dispatch) => {\r\n        const action = {\r\n            type: 'ON_DRAG_END'\r\n        }\r\n        dispatch(action)\r\n    }\r\n}","export default __webpack_public_path__ + \"static/media/sunday-logo.7e9958b4.svg\";","import React, { Component } from 'react'\r\nimport { NavLink, withRouter, Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux'\r\nimport sunday from \"../assets/img/sunday-logo.svg\"\r\nimport { checkLogin,updateUserNotifications } from '../store/actions/userAction.js'\r\nimport { loadBoards } from '../store/actions/boardAction.js'\r\nimport { socketService } from '../services/socketService';\r\n\r\nclass _HomeHeader extends Component {\r\n    state = {\r\n        isNavOpen: false,\r\n        isScrolled: false,\r\n        scrollTop: 0\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"scroll\", this.handleScroll);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"scroll\", this.handleScroll);\r\n    }\r\n\r\n    handleScroll = () => {\r\n        const excludedRoutes = [\r\n            '/',\r\n            '/login',\r\n            '/signup'\r\n        ]\r\n        if (window.scrollY > 0 && excludedRoutes.indexOf(this.props.location.pathname) > 0) {\r\n            document.querySelector(\".home-header-container\").className = \"flex home-header-container header-shadow\";\r\n        } else if (excludedRoutes.indexOf(this.props.location.pathname) > 0) {\r\n            document.querySelector(\".home-header-container\").className = \"flex home-header-container\";\r\n        }\r\n    };\r\n\r\n    toggleMobileNav = () => {\r\n        const { isNavOpen } = this.state;\r\n        this.setState({ isNavOpen: !isNavOpen });\r\n    }\r\n\r\n    render() {\r\n        const { isNavOpen } = this.state;\r\n        return <header ref={this.scrollRef} onScroll={this.onScroll} className={`home-header-container flex`}>\r\n            <Link to=\"/\"> <img src={sunday} alt=\"sunday logo\" /> </Link>\r\n            <nav>\r\n                <div className={`hamburger ${isNavOpen ? 'open' : ''}`} onClick={this.toggleMobileNav}>\r\n                    <span></span>\r\n                    <span></span>\r\n                    <span></span>\r\n                </div>\r\n                <ul className={`flex nav-list ${isNavOpen ? 'open-nav' : ''}`}>\r\n                    <li><NavLink activeClassName=\"nav-active\" to=\"/login\">Log in</NavLink></li>\r\n                    <li><NavLink activeClassName=\"nav-active\" to=\"/signup\">Sign up</NavLink></li>\r\n                    <li><button className=\"home-header-login-btn\" onClick={async () => {\r\n                        try {\r\n                            const user = await this.props.checkLogin({\r\n                                username: \"guest\",\r\n                                password: \"12345678\"\r\n                            })\r\n                            if (user) {\r\n                                const boards = await this.props.loadBoards(user._id)\r\n                                const path = (boards.length) ? `/board/${boards[0]._id}` : '/board'\r\n                                this.props.history.push(path)\r\n                            }\r\n                        } catch (err) {\r\n                            // console.log(err);\r\n                        }\r\n                    }}>Try as guest</button></li>\r\n                </ul>\r\n            </nav>\r\n        </header>\r\n    }\r\n}\r\n\r\n\r\nconst mapGlobalStateToProps = (state) => {\r\n    return {\r\n        user: state.userReducer.user\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    checkLogin,\r\n    loadBoards,\r\n    updateUserNotifications\r\n}\r\n\r\n\r\nexport const HomeHeader = withRouter(connect(mapGlobalStateToProps, mapDispatchToProps)(_HomeHeader));","import { Component } from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport { connect } from 'react-redux';\r\nimport { checkLogin } from '../store/actions/userAction.js'\r\nimport { loadBoards } from '../store/actions/boardAction.js'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { updateUserNotifications } from '../store/actions/userAction.js'\r\n\r\n\r\n\r\n\r\n\r\nimport { HomeHeader } from '../cmps/HomeHeader.jsx';\r\n\r\nclass _Login extends Component {\r\n\r\n    state = {\r\n        msg: '',\r\n        loggedinUser: '',\r\n        loginCred: {\r\n            username: '',\r\n            password: '',\r\n        }\r\n    }\r\n\r\n    loginHandleChange = ev => {\r\n        const { name, value } = ev.target\r\n        this.setState(prevState => ({\r\n            loginCred: {\r\n                ...prevState.loginCred,\r\n                [name]: value\r\n            }\r\n        }))\r\n    }\r\n\r\n    doLogin = async ev => {\r\n        ev.preventDefault()\r\n        const { username, password } = this.state.loginCred\r\n        if (!username || !password) {\r\n            this.setState({ msg: 'Please enter username/password' })\r\n            return\r\n        } try {\r\n            \r\n            const user = await this.props.checkLogin({ ...this.state.loginCred })\r\n            if (user) {              \r\n                const boards = await this.props.loadBoards(user._id)\r\n                const path = (boards.length) ? `/board/${boards[0]._id}` : '/board'\r\n                this.props.history.push(path)\r\n            }\r\n        } catch (err) {\r\n            this.setState({ msg: 'Wrong username/password' })\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"main-login-signup-container\">\r\n                <HomeHeader/>\r\n                <div className=\"inner-login-signup-container\">\r\n                    <div>\r\n                        <h2>Welcome back</h2>\r\n                        <h3>Log in</h3>\r\n                    </div>\r\n                    <form onSubmit={this.doLogin} className=\"sunday-form\">\r\n                        <TextField margin=\"normal\" required name=\"username\" placeholder=\"Username\" autoFocus\r\n                            onChange={this.loginHandleChange} />\r\n                        <TextField\r\n                            required\r\n                            name=\"password\"\r\n                            type=\"password\"\r\n                            placeholder=\"Password\"\r\n                            onChange={this.loginHandleChange}\r\n                        />\r\n                        <h3>{this.state.msg}</h3>\r\n                        <button className=\"login-signup-btn\" type=\"submit\">Sign in</button>\r\n                    </form>\r\n                    <Link to=\"/signup\">Don't have an account? <b>Sign Up</b></Link>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapGlobalStateToProps = (state) => {\r\n    return {\r\n        boards: state.boardReducer.boards,\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    checkLogin,\r\n    loadBoards,\r\n    updateUserNotifications\r\n}\r\nexport const Login = connect(mapGlobalStateToProps, mapDispatchToProps)(_Login)\r\n\r\n","import { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { signup } from '../store/actions/userAction.js'\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport { Link } from 'react-router-dom'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { utilService } from '../services/utilService.js';\r\nimport { VisibilityOff, Visibility } from '@material-ui/icons';\r\nimport { HomeHeader } from './HomeHeader.jsx';\r\n\r\n\r\n\r\nclass _SignUp extends Component {\r\n\r\n    state = {\r\n        msg: '',\r\n        signupCred: {\r\n            username: '',\r\n            password: '',\r\n            fullname: '',\r\n            email: '',\r\n            confirm: ''\r\n        },\r\n        isShowPassword: false\r\n    }\r\n\r\n    onSignUp = async (user) => {\r\n\r\n        const { username, password, fullname, email } = user\r\n        try {\r\n            await this.props.signup({ username, password, fullname, email })\r\n            this.setState(prevState => ({ signupCred: { ...prevState.signupCred, password: '', confirm: '', username: '', fullname: '', email: 'signupCred' } }))\r\n            this.props.history.push('/board')\r\n        } catch (err) {\r\n            this.setState({ msg: 'Try again' })\r\n        }\r\n\r\n    }\r\n\r\n    onTogglePassword = () => {\r\n        this.setState(prevState => ({ ...prevState, isShowPassword: !this.state.isShowPassword }))\r\n    }\r\n\r\n\r\n    validate = (values) => {\r\n        this.setState({ signupCred: values })\r\n        const errors = {};\r\n        if (!values.username) {\r\n            errors.username = 'Required';\r\n        }\r\n        if (!values.fullname) {\r\n            errors.fullname = 'Required';\r\n        }\r\n        if (!values.email) {\r\n            errors.email = 'Required';\r\n        } else if (\r\n            !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n        ) {\r\n            errors.email = 'Invalid email address';\r\n        }\r\n        // if (!values.password) {\r\n        //     // errors.password = 'Password is too short'\r\n        //     errors.password = 'Required';\r\n        // }else if(!/^(?=.*[A-Z].*[A-Z])(?=.*[!@#$&*])(?=.*[0-9].*[0-9])(?=.*[a-z].*[a-z].*[a-z]).{8}$/i.test(values.password))\r\n        // {\r\n        //     errors.password='Weak password'\r\n        // }\r\n        if (values.password !== values.confirm) errors.confirm = 'Password don`t match!!! '\r\n        if (!values.confirm) errors.email = 'Required';\r\n        return errors;\r\n    }\r\n\r\n\r\n    onGetRandomPassword = (ev) => {\r\n        ev.preventDefault()\r\n        const pass = utilService.getRandomPassword()\r\n        this.setState(prevState => ({ signupCred: { ...prevState.signupCred, password: pass, confirm: pass } }))\r\n    }\r\n\r\n\r\n    render() {\r\n        const { isShowPassword } = this.state\r\n        const inputType = (isShowPassword) ? 'text' : 'password';\r\n        return (\r\n            <>\r\n                <div className=\"main-login-signup-container\">\r\n                    <HomeHeader />\r\n                    <div className=\"inner-login-signup-container\">\r\n                        <h2>Let's get started!</h2>\r\n                        <h3>Sign up</h3>\r\n                        <Formik\r\n                            enableReinitialize={true}\r\n                            initialValues={this.state.signupCred}\r\n                            validate={this.validate}\r\n                            onSubmit={this.onSignUp}>\r\n                            {() => (\r\n                                <Form className=\"sunday-form signup-fields-arranegment\">\r\n                                    <div>\r\n                                        <Field placeholder=\"Username\" autoFocus type=\"text\" name=\"username\" autoComplete=\"off\" required as={TextField} />\r\n                                        <ErrorMessage name=\"fullname\" className=\"err-msg\" />\r\n                                    </div>\r\n                                    <div>\r\n                                        <Field required placeholder=\"Fullname\" type=\"text\" name=\"fullname\" as={TextField} />\r\n                                        <ErrorMessage name=\"fullname\" className=\"err-msg\" />\r\n                                    </div>\r\n                                    <div className=\"password-container\">\r\n                                        <div className=\"relative password-inner-container\">\r\n                                            <Field placeholder=\"Password\" type={inputType} name=\"password\" as={TextField} />\r\n                                            <ErrorMessage name=\"password\" className=\"err-msg\" />\r\n                                            {!isShowPassword && <Visibility onClick={() => this.onTogglePassword()} />}\r\n                                            {isShowPassword && <VisibilityOff onClick={() => this.onTogglePassword()} />}\r\n                                        </div>\r\n                                        <div className=\"password-inner-container\">\r\n                                            <Field placeholder=\"Confirm password\" type=\"password\" name=\"confirm\" as={TextField} />\r\n                                            <ErrorMessage name=\"confirm\" className=\"err-msg\" />\r\n                                        </div>\r\n                                        <button onClick={(ev) => this.onGetRandomPassword(ev)}>\r\n                                            Get strong password\r\n                                    </button>\r\n                                    </div>\r\n                                    <div>\r\n                                        <Field placeholder=\"Email\" type=\"email\" name=\"email\" as={TextField} />\r\n                                        <ErrorMessage name=\"email\" className=\"err-msg\" />\r\n                                    </div>\r\n                                    <button className=\"login-signup-btn\" type=\"submit\">Sign up</button>\r\n\r\n                                </Form>\r\n                            )\r\n                            }\r\n                        </Formik>\r\n                        <Link to=\"/login\">Already have an account? <b>Log in</b></Link>\r\n                    </div>\r\n                </div >\r\n            </>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\nconst mapGlobalStateToProps = (state) => {\r\n    return {\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    signup\r\n\r\n}\r\nexport const SignUp = connect(mapGlobalStateToProps, mapDispatchToProps)(_SignUp)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/sunday-icon.4e66f469.svg\";","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport { utilService } from \"../../services/utilService\"\r\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\r\nimport moment from 'moment'\r\nimport DeleteOutlineOutlinedIcon from '@material-ui/icons/DeleteOutlineOutlined';\r\nimport NotificationsNoneIcon from '@material-ui/icons/NotificationsNone';\r\nimport { userService } from \"../../services/userService\";\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    typography: {\r\n        padding: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nexport function UserNotifications({ notifications, onCleanNotifications, onUpdateNotifications }) {\r\n\r\n    const classes = useStyles();\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const open = Boolean(anchorEl);\r\n    const id = open ? 'notifications-popover' : undefined;\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"relative\">\r\n                {notifications && <span className=\"count-notifications\">{notifications.length}</span>}\r\n                <NotificationsNoneIcon\r\n                    data-tip data-for=\"notifications\"\r\n                    aria-describedby={id}\r\n                    onClick={handleClick}\r\n                />\r\n            </div>\r\n            <Popover\r\n                id={id}\r\n                open={open}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'right',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <section className=\"user-notifications\">\r\n                    <header className=\"flex space-between align-center\">\r\n                        {notifications?.length ?\r\n                            (<>\r\n                                <h1>Notifications</h1>\r\n                                <DeleteOutlineOutlinedIcon onClick={onCleanNotifications} />\r\n                            </>)\r\n                            : (<h1>You have no notifications</h1>)}\r\n\r\n                    </header>\r\n                    {notifications?.length > 0 && (notifications.map((notification, idx) => {\r\n\r\n                        return <div key={idx} className=\"notification-details\">\r\n                            <div className=\"flex\">\r\n                                {notification.byMember.imgUrl ? <img src={notification.byMember.imgUrl} className=\"user-thumbnail\" alt=\"\" /> :\r\n                                    <span className=\"user-thumbnail\">{utilService.getNameInitials(notification.byMember.fullname)}</span>\r\n                                }\r\n                                <p>{notification?.notificationTxt}</p>\r\n                            </div>\r\n                            <div className=\"time flex\"> <AccessTimeIcon /><h4>{moment(notification.createdAt).from(Date.now())}</h4></div>\r\n                        </div>\r\n                    })\r\n                    )}\r\n                </section>\r\n            </Popover>\r\n            <ReactTooltip className=\"sunday-tooltip\" id=\"notifications\" place=\"right\" effect=\"solid\">\r\n                Notifications\r\n      </ReactTooltip>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\nexport default function SimplePopover() {\r\n}","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport sundayIcon from \"../assets/img/sunday-icon.svg\"\r\nimport PersonOutlineIcon from '@material-ui/icons/PersonOutline';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport { UserNotifications } from \"./user/UserNotifications.jsx\"\r\n\r\nexport class MainSideBar extends Component {\r\n    state = {\r\n        isShowUserNotification: false\r\n    }\r\n    onToggleUserNotifications = () => {\r\n        this.setState({ isShowUserNotification: !this.state.isShowUserNotification })\r\n    }\r\n    render() {\r\n        const { onLogOut, user, onCleanNotifications, onUpdateNotifications } = this.props;\r\n        const notifications = user.notifications?.filter(notification => !notification.isRead)\r\n\r\n        return <div className=\"main-sidebar-container flex column relative\">\r\n            <div className=\"main-side-bar-top flex column align-center\">\r\n                <Link to=\"/\">\r\n                    <img className=\"sunday-icon\" src={sundayIcon} alt=\"sunday-logo-icon\" />\r\n                </Link>\r\n                <UserNotifications notifications={notifications} onCleanNotifications={onCleanNotifications} />\r\n                {/* <div className=\"relative\">\r\n                    {user.notifications && <span className=\"count-notifications\">{notifications.length}</span>}\r\n                    <NotificationsNoneIcon data-tip data-for=\"notifications\" onClick={this.onToggleUserNotifications} />\r\n                </div> */}\r\n                {/* {this.state.isShowUserNotification && <UserNotification notifications={user.notifications} onCleanNotifications={onCleanNotifications} user={user} onUpdateNotifications={onUpdateNotifications} onToggleUserNotifications={this.onToggleUserNotifications} />} */}\r\n\r\n                <Link to={`/user/${user._id}/general`}>\r\n                    <div className=\"greet-user\">\r\n                        <span>Hello {user.fullname}</span>\r\n                    </div>\r\n                </Link>\r\n            </div>\r\n            <div className=\"main-side-bar-bottom flex column align-center\">\r\n                <Link to={`/user/${user._id}/general`}>\r\n                    <PersonOutlineIcon data-tip data-for=\"myAccount\" />\r\n                </Link>\r\n                <ExitToAppIcon data-tip data-for=\"logOut\" onClick={onLogOut} />\r\n            </div>\r\n\r\n            <ReactTooltip className=\"sunday-tooltip\" id=\"myAccount\" place=\"right\" effect=\"solid\">\r\n                My Account\r\n      </ReactTooltip>\r\n            <ReactTooltip className=\"sunday-tooltip\" id=\"logOut\" place=\"right\" effect=\"solid\" >\r\n                Log Out\r\n      </ReactTooltip>\r\n        </div >\r\n    }\r\n}\r\n","\r\nimport { Component } from 'react'\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nexport const SearchInput = ({ onSetFilter, placeHolder }) => {\r\n\r\n    const handelChange = (ev) => {\r\n        const { value } = ev.target\r\n        onSetFilter(value)\r\n    };\r\n    \r\n    return (\r\n\r\n        <section className=\"search-field\">\r\n            <SearchIcon />\r\n            <input id=\"standard-basic\" label=\"Search\" name=\"txt\"\r\n                onChange={handelChange} autoComplete=\"off\" placeholder={`Search ${placeHolder}`} />\r\n        </section>\r\n\r\n    )\r\n\r\n\r\n}","import React from 'react'\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    wrapper: {\r\n        position: \"fixed\",\r\n        top: 0,\r\n        bottom: 0,\r\n        right: 0,\r\n        left: 0,\r\n        backgroundColor: \"rgba(0, 0, 0, 0.4)\",\r\n        zIndex: 9999,\r\n    },\r\n    box: {\r\n        backgroundColor: \"#fff\",\r\n        textAlign: \"center\",\r\n        position: \"absolute\",\r\n        width: \"90%\",\r\n        padding: \"2px\",\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: \"500px\",\r\n        },\r\n        left: \"50%\",\r\n        top: \"50%\",\r\n        transform: \"translate(-50%, -50%)\",\r\n        color: \"#323338\",\r\n        boxShadow: \"0 4px 17px 6px rgba(0, 0, 0, 0.1)\",\r\n        \"& .close-modal-section\": {\r\n            textAlign: \"left\"\r\n        }\r\n    },\r\n    content: {\r\n        padding: \"1rem\",\r\n    }\r\n}))\r\n\r\nexport const Modal = ({ open = false, withCloseBtn = true, children, onClose }) => {\r\n    const classes = useStyles(withCloseBtn)\r\n    const modalRoot = document.getElementById('modal-root')\r\n    const modalTemplate = <div\r\n        className={classes.wrapper}\r\n        onClick={(ev) => {\r\n            ev.stopPropagation()\r\n            onClose()\r\n        }\r\n        }\r\n    >\r\n        <div className={classes.box}>\r\n            {withCloseBtn && <div className=\"close-modal-section\">\r\n                <IconButton onClick={onClose}>\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            </div>}\r\n            <div className={classes.content}>\r\n                {children}\r\n            </div>\r\n        </div>\r\n    </div >\r\n    return open ? ReactDOM.createPortal(modalTemplate, modalRoot) : null\r\n}\r\n","import React from 'react'\r\nimport { CSSTransition } from 'react-transition-group'\r\nimport Button from '@material-ui/core/Button';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { Modal } from './reuseable-basic-components/Modal';\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  deleteBtn: {\r\n    backgroundColor: \"#fb275d\",\r\n    boxShadow: \"none\",\r\n    color: \"#fff\",\r\n    \"&:hover\": {\r\n      backgroundColor: \"#ff4c79\",\r\n      boxShadow: \"none\",\r\n    }\r\n  }\r\n}))\r\n\r\nexport const ConfirmModal = ({ title, type, id, arg, close, onApprove, isInDeleteMode, isDeleteLabel }) => {\r\n  const msg = !isDeleteLabel ? `Are you sure You want to delete this ${type}?` : 'This label is active , are you sure you want to delete?'\r\n  const classes = useStyles()\r\n  return (\r\n    <Modal\r\n      open={isInDeleteMode}\r\n      onClose={close}\r\n    >\r\n      <h3>{msg}</h3>\r\n      <p>{`(${title})`}</p>\r\n      <div className=\"btn-confirm\">\r\n        <Button\r\n          onClick={() => {\r\n            onApprove(id, arg)\r\n          }}\r\n          variant=\"contained\"\r\n          className={classes.deleteBtn}\r\n          startIcon={<DeleteIcon />}\r\n        >\r\n          Delete\r\n          </Button>\r\n      </div>\r\n    </Modal>\r\n  )\r\n\r\n}\r\n","import React, { useState } from 'react'\r\nimport { ConfirmModal } from './ConfirmModal';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { Link } from 'react-router-dom'\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const BoardSideBarItem = ({ board, onDeleteBoard, user, idx }) => {\r\n\r\n    const [isInDeleteMode, setIsInDeleteMode] = useState(false)\r\n    const currBoardId = useSelector(state => state.boardReducer.board?._id)\r\n\r\n    return (\r\n        !board || !currBoardId ? null : <div className={`board-sidebar-item ${board._id === currBoardId ? 'selected' : ''}`} >\r\n            <Link to={`/board/${board._id}`}>{board.title}</Link>\r\n            {(user._id === board.createdBy) && <DeleteIcon onClick={() => setIsInDeleteMode(true)} />}\r\n            <ConfirmModal\r\n                id={board._id}\r\n                arg={idx}\r\n                onApprove={onDeleteBoard}\r\n                isInDeleteMode={isInDeleteMode}\r\n                close={() => setIsInDeleteMode(false)}\r\n                title={board.title}\r\n                type={'Board'}\r\n            />\r\n        </div >\r\n    )\r\n}\r\n","import AddIcon from '@material-ui/icons/Add';\r\nimport { Component } from 'react'\r\nimport {  SearchInput } from './SearchInput';\r\nimport { TextField } from '@material-ui/core';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport { BoardSideBarItem } from './BoardSideBarItem';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\n\r\n\r\nexport class BoardSideBar extends Component {\r\n\r\n    state = {\r\n        isAddBoard: false,\r\n        boardTitle: '',\r\n        isDelete: false,\r\n        txt: ''\r\n    }\r\n\r\n\r\n    onInputChange = ({ target }) => {\r\n        const { value } = target;\r\n        this.setState({ boardTitle: value });\r\n    };\r\n\r\n    onAddBoard = (ev) => {\r\n        ev.preventDefault()\r\n        if (!this.state.boardTitle) return\r\n        this.props.onAddBoard(this.state.boardTitle)\r\n        this.setState({ isAddBoard: false, boardTitle: '' })\r\n    }\r\n\r\n    toggleEditBoard = () => {\r\n        this.setState({ isAddBoard: !this.state.isAddBoard });\r\n    }\r\n\r\n    render() {\r\n\r\n        const { boards, onDeleteBoard, user, onSetFilter } = this.props;\r\n        const { boardTitle } = this.state\r\n        return (\r\n            <section className=\"board-side-bar\">\r\n                <div className=\"main-workspace-title flex\">\r\n                    <span className=\"letter flex\">\r\n                        <span>M</span>\r\n                        <HomeIcon />\r\n                    </span>\r\n                    <span>Main workspace</span>\r\n                </div>\r\n                <div className=\"board-sidebar-controlles\">\r\n                    <SearchInput onSetFilter={onSetFilter} placeHolder='boards' />\r\n                    <span className=\"board-sidebar-action-btn\" onClick={this.toggleEditBoard}>{!this.state.isAddBoard ? <> <AddIcon />Add</> : <> <RemoveIcon />Close</>}</span>\r\n\r\n                    {this.state.isAddBoard &&\r\n                        <form onSubmit={this.onAddBoard}>\r\n                            <TextField placeholder=\" Board Name\" autoFocus type=\"text\" autoComplete=\"off\"\r\n                                value={boardTitle} onChange={this.onInputChange} />\r\n                        </form>\r\n                    }\r\n                </div>\r\n                <div>\r\n                    <h3 className=\"board-sidebar-title\" >My boards</h3>\r\n                    <div>\r\n                        {!boards.length&&<div>No Boards..</div>}\r\n                        {boards.map((board, idx) => {\r\n                            return <BoardSideBarItem\r\n                                key={board._id}\r\n                                idx={idx}\r\n                                user={user}\r\n                                board={board}\r\n                                onDeleteBoard={onDeleteBoard}\r\n                            />\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </section >\r\n\r\n        )\r\n    }\r\n}\r\n","import 'react-dates/initialize';\r\nimport 'react-dates/lib/css/_datepicker.css';\r\nimport { DayPickerRangeController } from 'react-dates';\r\n\r\nimport { useEffect, useState } from 'react'\r\n\r\nexport const DatePicker = ({ closeDatePicker, changeDates }) => {\r\n\r\n  const [dates, setDates] = useState({ startDate: null, endDate: null })\r\n  const [focusedInput, setFocusedInput] = useState('startDate')\r\n  const [isStartDateOnly, setIsStartDateOnly] = useState(false)\r\n\r\n  const handleChange = () => {\r\n    if (dates.startDate?._d && dates.endDate?._d) changeDates({ startDate: dates.startDate?._d, endDate: dates.endDate?._d })\r\n    if (dates.startDate?._d && !dates.endDate?._d && !focusedInput) {\r\n      changeDates({ startDate: dates.startDate?._d, endDate: null })\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (dates.startDate?._d && !dates.endDate?._d && isStartDateOnly) {\r\n      changeDates({ startDate: dates.startDate?._d, endDate: null })\r\n      setIsStartDateOnly(false)\r\n    }\r\n\r\n    if (!focusedInput) closeDatePicker()\r\n\r\n    handleChange()\r\n    return () => {\r\n    }\r\n  }, [dates, focusedInput,isStartDateOnly])\r\n\r\n  return (\r\n    <div className=\"datePicker\">\r\n      <DayPickerRangeController\r\n        startDate={dates.startDate} // momentPropTypes.momentObj or null,\r\n        endDate={dates.endDate} // momentPropTypes.momentObj or null,\r\n        isOutsideRange={() => false}\r\n        onDatesChange={({ startDate, endDate }) => setDates({ startDate, endDate })}\r\n        focusedInput={focusedInput}\r\n        hideKeyboardShortcutsPanel={true}\r\n        onFocusChange={focusedInput => {\r\n          setFocusedInput(focusedInput)\r\n        }}\r\n      />\r\n      <button className=\"date-btn\" onClick={() => setIsStartDateOnly(true)}>Set</button>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n","import React, { Component } from 'react'\r\n\r\nexport class EditableElement extends Component {\r\n\r\n\r\n    state = {\r\n        title: this.props.children,\r\n        isEdit: true\r\n    }\r\n\r\n\r\n    handleChange = (ev) => {\r\n        const title = ev.currentTarget.textContent\r\n        this.setState({ title })\r\n    }\r\n    \r\n    checkKey = async (ev) => {\r\n        if ((ev.key === 'Enter' || ev.type === 'blur')/* &&this.state.title!==this.props.children */) {\r\n\r\n            this.setState({ isEdit: false })\r\n            const title = (this.state.title) ? this.state.title : 'New Title'\r\n            setTimeout(() => {\r\n                this.setState({ isEdit: true })\r\n                if (this.state.title === this.props.children) return\r\n                this.props.onChangeTitle(title)\r\n            }, 200)\r\n        }\r\n    }\r\n    render() {\r\n        const { isEdit, title } = this.state\r\n        return (\r\n            <>\r\n                <div onKeyDown={this.checkKey}\r\n                    className=\"editable-element\"\r\n                    onBlur={this.checkKey}\r\n                    contentEditable={isEdit}\r\n                    suppressContentEditableWarning={true}\r\n                    spellCheck=\"false\"\r\n                    onInput={this.handleChange}\r\n                >{this.props.children}</div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n","// import React, { Component } from 'react'\r\n// // import ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\n\r\n\r\n// export class Colors extends Component {\r\n\r\n//     changeColor = (color) => {\r\n//         const { onChangeColor } = this.props;\r\n//         onChangeColor(color);\r\n//     }\r\n\r\n//     render() {\r\n//         return <div className=\"edit-colors\">\r\n//             <span onClick={() => this.changeColor('#FF6E6E')} style={{ backgroundColor: \"#FF6E6E\" }}></span>\r\n//             <span onClick={() => this.changeColor('#fb275d')} style={{ backgroundColor: \"#fb275d\" }}></span>\r\n//             <span onClick={() => this.changeColor('#FF642E')} style={{ backgroundColor: \"#FF642E\" }}></span>\r\n//             <span onClick={() => this.changeColor('#037F4C')} style={{ backgroundColor: \"#037F4C\" }}></span>\r\n//             <span onClick={() => this.changeColor('#00ca72')} style={{ backgroundColor: \"#00ca72\" }}></span>\r\n//             <span onClick={() => this.changeColor('#61BD4F')} style={{ backgroundColor: \"#61BD4F\" }}></span>\r\n//             <span onClick={() => this.changeColor('#df5e88')} style={{ backgroundColor: \"#df5e88\" }}></span>\r\n//             <span onClick={() => this.changeColor('#ffcc00')} style={{ backgroundColor: \"#ffcc00\" }}></span>\r\n//             <span onClick={() => this.changeColor('#41EAD4')} style={{ backgroundColor: \"#41EAD4\" }}></span>\r\n//             <span onClick={() => this.changeColor('#e1ccec')} style={{ backgroundColor: \"#f09ae9\" }}></span>\r\n//             <span onClick={() => this.changeColor('#dddddd')} style={{ backgroundColor: \"#dddddd\" }}></span>\r\n//             <span onClick={() => this.changeColor('#7F5347')} style={{ backgroundColor: \"#7F5347\" }}></span>\r\n//             <span onClick={() => this.changeColor('#784BD1')} style={{ backgroundColor: \"#784BD1\" }}></span>\r\n//             <span onClick={() => this.changeColor('#0086C0')} style={{ backgroundColor: \"#0086C0\" }}></span>\r\n//             <span onClick={() => this.changeColor('#0085ff')} style={{ backgroundColor: \"#0085ff\" }}></span>\r\n//             <span onClick={() => this.changeColor('#3D315B')} style={{ backgroundColor: \"#3D315B\" }}></span>\r\n//         </div>\r\n//     }\r\n// }\r\n\r\n\r\nimport React from 'react'\r\n\r\nexport const Colors = ({ onChangeColor, groupId }) => {\r\n\r\n    const changeColor = (color) => {\r\n        onChangeColor(color);\r\n    }\r\n\r\n    const colorsList = [\r\n        '#FF6E6E',\r\n        '#fb275d',\r\n        '#FF642E',\r\n        '#037F4C',\r\n        '#00ca72',\r\n        '#61BD4F',\r\n        '#df5e88',\r\n        '#ffcc00',\r\n        '#41EAD4',\r\n        '#e1ccec',\r\n        '#dddddd',\r\n        '#7F5347',\r\n        '#784BD1',\r\n        '#0086C0',\r\n        '#0085ff',\r\n        '#3D315B',\r\n    ]\r\n\r\n    return (\r\n        <div className=\"edit-colors\">\r\n            {colorsList.map(hexValue => (\r\n                <span\r\n                    key={hexValue}\r\n                    onClick={() => changeColor(hexValue)}\r\n                    style={{ backgroundColor: hexValue }}\r\n                ></span>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n","import { useState } from \"react\"\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { ConfirmModal } from \"./ConfirmModal\";\r\n\r\nexport function Label({ label, onDeleteLabel, labelGroup, setCurrLabel, isEditLabel, labelType }) {\r\n    const [isInDeleteMode, setIsInDeleteMode] = useState(false)\r\n    return (\r\n        <div\r\n            className=\"labels-menu-item\"\r\n            onClick={() => setCurrLabel(label, labelGroup, labelType)}\r\n            // onMouseEnter={() => setIsShowOpt(true)}\r\n            // onMouseLeave={() => {\r\n            //     setIsShowOpt(false)\r\n            // }}\r\n            style={{ backgroundColor: label.color }}\r\n        >\r\n            {label.text}\r\n            {isEditLabel &&\r\n                < DeleteIcon className=\"opt-icon\"\r\n                    onClick={(ev) => {\r\n                        ev.stopPropagation()\r\n                        if (label.isActive) setIsInDeleteMode(true)\r\n                        else onDeleteLabel(label.id, { labelGroup, labelType })\r\n                    }}\r\n                />}\r\n\r\n            {isInDeleteMode &&\r\n                <ConfirmModal\r\n                    id={label.id}\r\n                    arg={{ labelGroup, labelType }}\r\n                    onApprove={onDeleteLabel}\r\n                    close={() => setIsInDeleteMode(false)}\r\n                    isInDeleteMode={isInDeleteMode}\r\n                    title={label.text}\r\n                    isDeleteLabel={true}\r\n                />}\r\n        </div>\r\n\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\nimport { Colors } from './Colors';\r\nimport { Button, TextField } from '@material-ui/core';\r\nimport { Label } from './Label';\r\n\r\n\r\nexport class LabelMenu extends Component {\r\n\r\n    state = {\r\n        currLabel: null,\r\n        isOpen: false,\r\n        isAddLabelOpen: false,\r\n        isColorPalletteOpen: false,\r\n        showAddLabelError: false,\r\n        newLabel: {\r\n            text: '',\r\n            color: null\r\n        },\r\n        isShowOpt: false,\r\n        isEditLabel: false\r\n    }\r\n\r\n    chosenLabel = React.createRef();\r\n\r\n    componentWillUnmount() {\r\n        this.setState({ newLabel: { text: '', color: null } });\r\n    }\r\n\r\n\r\n    toggleMenu = () => {\r\n        const { isOpen } = this.state;\r\n        this.setState({ isOpen: !isOpen, isEditLabel: false });\r\n        //    document.querySelector('.group-container').scrollHeight()\r\n        // const elGroup = document.querySelector('.labels-menu')\r\n        // elGroup.scrollBottom = elGroup.scrollHeight;\r\n    }\r\n\r\n    toggleAddNewLabel = () => {\r\n        const { isAddLabelOpen } = this.state;\r\n        this.setState({ isAddLabelOpen: !isAddLabelOpen, newLabel: { text: '', color: null } });\r\n    }\r\n\r\n    toggleAddLabelError = () => {\r\n        this.setState({ showAddLabelError: true }, () => {\r\n            setTimeout(() => {\r\n                this.setState({ showAddLabelError: false });\r\n            }, 1500);\r\n        });\r\n    }\r\n\r\n    setCurrLabel = (newLabel, labelGroup, labelType) => {\r\n        const { currLabel } = this.props\r\n        if (currLabel.text === newLabel.text) {\r\n            this.toggleMenu();\r\n            return\r\n        }\r\n        this.setState({ currLabel: newLabel }, () => {\r\n            this.props.onSaveLabel(newLabel, labelGroup, labelType);\r\n            this.toggleMenu();\r\n        });\r\n    }\r\n\r\n    setNewLabelColor = (color) => {\r\n        this.setState({ newLabel: { ...this.state.newLabel, color } })\r\n    }\r\n\r\n    addLabel = (ev) => {\r\n        ev.preventDefault();\r\n        const { onAddLabel, labelGroup } = this.props;\r\n        const { newLabel } = this.state;\r\n        if (!newLabel.text || !newLabel.color) {\r\n            this.toggleAddLabelError();\r\n            return;\r\n        }\r\n        onAddLabel(newLabel, labelGroup);\r\n        this.toggleAddNewLabel();\r\n    }\r\n\r\n    handleInput = (ev) => {\r\n        const { name, value } = ev.target\r\n        const { newLabel } = this.state;\r\n        newLabel[name] = value;\r\n        this.setState({ newLabel })\r\n    }\r\n\r\n    toggleEdit = () => {\r\n        this.setState({ isEditLabel: !this.state.isEditLabel })\r\n    }\r\n\r\n    render() {\r\n        const { labels, currLabel, onDeleteLabel, labelGroup, labelType, isLast, isScroll } = this.props;\r\n\r\n        const { isAddLabelOpen, isOpen, showAddLabelError, newLabel, isEditLabel } = this.state;\r\n        return <div className=\"labels-menu-container\">\r\n            <div\r\n                ref={this.chosenLabel}\r\n                className=\"labels-menu-chosen-item\"\r\n                onClick={this.toggleMenu}\r\n                style={{ backgroundColor: currLabel.color }}\r\n            >\r\n                {currLabel.text}\r\n                <span className=\"fold\"></span>\r\n            </div>\r\n            {isOpen &&\r\n                <ClickAwayListener onClickAway={(ev) => {\r\n                    if (ev.target === this.chosenLabel.current) return\r\n                    this.toggleMenu()\r\n                }}>\r\n                    <div\r\n\r\n                        className={`labels-menu-floating-container${isLast ? ' last' : ''}`}\r\n                    >\r\n                        <div className=\"labels-grid\">\r\n                            {labels.map((label, idx) => {\r\n                                return <Label\r\n                                    isEditLabel={isEditLabel}\r\n                                    label={label}\r\n                                    key={idx}\r\n                                    setCurrLabel={this.setCurrLabel}\r\n                                    labelType={labelType}\r\n                                    labelGroup={labelGroup}\r\n                                    toggleMenu={this.toggleMenu}\r\n                                    onDeleteLabel={onDeleteLabel} />\r\n                            })}\r\n                            <div\r\n                                className=\"labels-menu-item new-label\"\r\n                                onClick={this.toggleAddNewLabel}\r\n                            >\r\n                                Add {this.props.labelType}\r\n                            </div>\r\n                        </div>\r\n                        {isAddLabelOpen && <div className=\"add-new-label-container\">\r\n                            <div className=\"flex space-between\">\r\n                                <span onClick={this.toggleAddNewLabel}>Cancel</span>\r\n                                <span onClick={this.addLabel}>Save</span>\r\n                            </div>\r\n                            <form onSubmit={this.addLabel} className=\"relative\">\r\n                                <span\r\n                                    style={{ backgroundColor: `${newLabel.color ? newLabel.color : ''}` }}\r\n                                    className=\"color-preview\"></span>\r\n                                <TextField\r\n                                    name=\"text\"\r\n                                    autoComplete=\"off\"\r\n                                    placeholder={showAddLabelError ? \"Please enter label + color\" : \"Enter label\"}\r\n                                    onChange={this.handleInput}\r\n                                />\r\n                            </form>\r\n                            <Colors onChangeColor={this.setNewLabelColor} />\r\n                        </div>}\r\n                        <Button className=\"edit-label-btn\" onClick={this.toggleEdit}>{isEditLabel ? 'Done' : 'Edit'}</Button>\r\n                    </div>\r\n                </ClickAwayListener>\r\n            }\r\n        </div>\r\n    }\r\n}\r\n\r\n\r\n","import React from 'react';\r\n\r\nconst ChatBubble = () => {\r\n    return (\r\n        <svg id=\"Capa_1\" enableBackground=\"new 0 0 511.072 511.072\" height=\"512\" viewBox=\"0 0 511.072 511.072\" width=\"512\" xmlns=\"http://www.w3.org/2000/svg\"><g id=\"Speech_Bubble_48_\"><g><path d=\"m74.39 480.536h-36.213l25.607-25.607c13.807-13.807 22.429-31.765 24.747-51.246-36.029-23.644-62.375-54.751-76.478-90.425-14.093-35.647-15.864-74.888-5.121-113.482 12.89-46.309 43.123-88.518 85.128-118.853 45.646-32.963 102.47-50.387 164.33-50.387 77.927 0 143.611 22.389 189.948 64.745 41.744 38.159 64.734 89.63 64.734 144.933 0 26.868-5.471 53.011-16.26 77.703-11.165 25.551-27.514 48.302-48.593 67.619-46.399 42.523-112.042 65-189.83 65-28.877 0-59.01-3.855-85.913-10.929-25.465 26.123-59.972 40.929-96.086 40.929zm182-420c-124.039 0-200.15 73.973-220.557 147.285-19.284 69.28 9.143 134.743 76.043 175.115l7.475 4.511-.23 8.727c-.456 17.274-4.574 33.912-11.945 48.952 17.949-6.073 34.236-17.083 46.99-32.151l6.342-7.493 9.405 2.813c26.393 7.894 57.104 12.241 86.477 12.241 154.372 0 224.682-93.473 224.682-180.322 0-46.776-19.524-90.384-54.976-122.79-40.713-37.216-99.397-56.888-169.706-56.888z\" /></g></g></svg>\r\n    )\r\n}\r\n\r\nexport default ChatBubble;","import React, { useEffect, useState } from 'react'\r\nimport { userService } from '../services/userService'\r\n\r\nexport const useGetUser = (userId) => {\r\n\r\n    const [user, setUser] = useState(null)\r\n    const [isFetch, setIsFetch] = useState(true)\r\n\r\n    useEffect(() => {\r\n        fetchUser()\r\n        return () => setIsFetch(false)\r\n    }, [])\r\n\r\n    async function fetchUser() {\r\n        const user = await userService.getUserById(userId)\r\n        if(isFetch) setUser(user)\r\n    }\r\n\r\n    return user\r\n}\r\n","import { Link } from 'react-router-dom'\r\nimport { useGetUser } from '../../custom-hooks/useGetUser'\r\nimport { utilService } from '../../services/utilService'\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\n\r\nexport const MemberPreview = ({ member, onUpdateMembers, type }) => {\r\n    // const user = useGetUser(memberId)\r\n\r\n    return (\r\n        member && <div className=\"flex align-center space-between member-row\" >\r\n            <Link to={`/user/${member._id}/general`} >\r\n                <div className=\"flex align-center space-between\">\r\n                    {member.imgUrl ? <img src={member.imgUrl} className=\"user-thumbnail\" alt=\"\" /> :\r\n                        <span className=\"user-thumbnail\">{utilService.getNameInitials(member.fullname)}</span>}\r\n                    <span className=\"modal-user-full-name\">{member.fullname}</span>\r\n                </div>\r\n            </Link>\r\n            {type === 'remove' ? <RemoveIcon onClick={(ev) => {\r\n                ev.stopPropagation()\r\n                onUpdateMembers(member, 'remove')\r\n            }} className=\"remove-icon\" />\r\n                : <AddIcon onClick={(ev) => {\r\n                    ev.stopPropagation()\r\n                    onUpdateMembers(member, 'add')\r\n                }\r\n                } className=\"remove-icon\" />}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { MemberPreview } from './MemberPreview'\r\n\r\nexport const MemberList = ({ members, onUpdateMembers, type }) => {\r\n    return (\r\n        <>\r\n            {members.map(member => {\r\n                return <MemberPreview\r\n                    key={member._id}\r\n                    member={member}\r\n                    onUpdateMembers={onUpdateMembers}\r\n                    type={type} />\r\n            })}\r\n        </>\r\n    )\r\n}\r\n","import { Link } from 'react-router-dom'\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { utilService } from '../services/utilService.js';\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\nimport { MemberList } from './members-components/MemberList.jsx';\r\n\r\n\r\nexport function TaskMembersModal({ availableBoardMembers, cardMembers, changeTaskMembers, onCloseModal }) {\r\n    return (<ClickAwayListener onClickAway={onCloseModal}>\r\n        <div className=\"members-modal-basic\" >\r\n            <div>\r\n                <h3 className=\"members-modal-task-members-title\">Task Members</h3>\r\n                <MemberList\r\n                    members={cardMembers}\r\n                    onUpdateMembers={changeTaskMembers}\r\n                    type='remove' />\r\n            </div>\r\n            <div>\r\n                <h3>Board Members</h3>\r\n                <MemberList\r\n                    members={availableBoardMembers}\r\n                    onUpdateMembers={changeTaskMembers}\r\n                    type='add' />\r\n            </div>\r\n        </div>\r\n    </ClickAwayListener>\r\n    )\r\n}\r\n","import { utilService } from '../services/utilService'\r\n\r\nexport const ProgressBar = ({ startDate, endDate, groupColor, onOpenPicker, createdAt }) => {\r\n\r\n    const checkDueDate = (startDate, endDate) => {\r\n        let progressVal;\r\n        const start = new Date(startDate).getTime()\r\n        const today = new Date().getTime()\r\n        const end = new Date(endDate).getTime()\r\n        if (startDate && endDate && start > today) return 0\r\n        else if (!endDate && startDate && start > today) {\r\n            const timePassed = today - createdAt\r\n            progressVal = Math.round((timePassed / (start - createdAt)) * 100)\r\n            return progressVal\r\n        }\r\n        else if (!endDate && startDate && start < today) return 100\r\n\r\n        const timePassed = Math.abs(today - start)\r\n        const range = Math.abs(end - start)\r\n        progressVal = Math.round(timePassed * 100 / range)\r\n        return progressVal\r\n    }\r\n\r\n    const startMonth = new Date(startDate).getMonth()\r\n    const startDay = new Date(startDate).getDate()\r\n    const startDateForDisplay = utilService.getNameOfMonth(startMonth) + ' ' + startDay\r\n    const endMonth = new Date(endDate).getMonth()\r\n    const endDay = new Date(endDate).getDate()\r\n    const endDateForDisplay = utilService.getNameOfMonth(endMonth) + ' ' + endDay\r\n    let dateRange = endDate ? startDateForDisplay + ' - ' + endDateForDisplay : startDateForDisplay\r\n    let width;\r\n\r\n    if (!startDate && !endDate) {\r\n        dateRange = 'Choose Date'\r\n        width = 0\r\n    } else width = checkDueDate(startDate, endDate)\r\n\r\n\r\n    return (\r\n        <div onClick={onOpenPicker} className=\"progressbar-container\" style={{ backgroundColor: 'rgb(121 115 115 / 90%)' }}>\r\n            <div className=\"inner-progressbar\"\r\n                style={{ backgroundColor: groupColor, width: width + '%' }}>\r\n                <span style={{ color: groupColor === '#c7c1c1' ? ' #333333' : '#f9f9f9' }}>{dateRange}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import ReactTooltip from \"react-tooltip\"\r\nimport { useGetUser } from \"../../custom-hooks/useGetUser\"\r\nimport { utilService } from \"../../services/utilService\"\r\n\r\n\r\nexport function MemberForDisplay({ isFilterDisplay, member, backgroundColor }) {\r\n    return (\r\n        <>\r\n\r\n            {member && member.imgUrl ?\r\n                <img\r\n                    src={member.imgUrl}\r\n                    className=\"user-thumbnail\"\r\n                    alt=\"\"\r\n                /> : member &&\r\n                <h5\r\n                    style={{ backgroundColor }}\r\n                    className=\"user-thumbnail\">\r\n                    {(utilService.getNameInitials(member.fullname).toUpperCase())}\r\n                </h5>}\r\n            {isFilterDisplay && member && <><span>{member.fullname}</span>\r\n                <ReactTooltip className=\"sunday-tooltip\" id={member._id} place=\"bottom\" effect=\"solid\">\r\n                    {`Member is ${member.fullname}`}\r\n                </ReactTooltip></>}\r\n        </>\r\n    )\r\n}\r\n","import React, { useMemo, useState } from 'react'\r\nimport { Delete } from '@material-ui/icons';\r\nimport { DatePicker } from './DatePicker';\r\nimport { EditableElement } from './EditableElement';\r\nimport { LabelMenu } from './LabelMenu';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n    changeCardTitle,\r\n    deleteCard,\r\n    changeTaskMembers,\r\n    changeCardDates,\r\n    changeCardLabels,\r\n    deleteLabel,\r\n    addCardLabel\r\n} from '../store/actions/boardAction'\r\nimport ChatBubble from '../assets/img/ChatBubble.jsx';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport { TaskMembersModal } from './TaskMembersModal.jsx'\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport { ProgressBar } from './ProgressBar';\r\nimport { ClickAwayListener } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom'\r\nimport { setMsg } from '../store/actions/userAction.js'\r\nimport { ConfirmModal } from './ConfirmModal.jsx'\r\nimport { MemberForDisplay } from './members-components/MemberForDisplay';\r\nimport DragIndicatorIcon from '@material-ui/icons/DragIndicator';\r\n\r\n\r\nexport const CardPreview = ({ idx, group, card }) => {\r\n    const [areMembersShown, setAreMembersShown] = useState(false)\r\n    const [isDateShown, setIsDateShown] = useState(false)\r\n    const [isInDeleteMode, setIsInDeleteMode] = useState(false)\r\n    const { boardMembers, isScroll, board } = useSelector(({ boardReducer }) => boardReducer)\r\n    const loggedInUser = useSelector(state => state.userReducer.loggedInUser)\r\n    const dispatch = useDispatch()\r\n\r\n    const onChangeTitle = async (cardTitle) => {\r\n        await dispatch(changeCardTitle({ board, groupId: group.id, cardToUpdate: card, cardTitle, user: loggedInUser }))\r\n    }\r\n\r\n    const onDeleteCard = async (cardId, group) => {\r\n        await dispatch(deleteCard({ groupId: group.id, board, cardId, user: loggedInUser }))\r\n        dispatch(setMsg('Card Successfully Removed'))\r\n    }\r\n\r\n    const onChangeTaskMembers = (member, sign) => {\r\n        dispatch(changeTaskMembers(member, sign, board, card, group.id, loggedInUser))\r\n    }\r\n\r\n    const onChangeCardDates = (dates) => {\r\n        if (dates.startDate && dates.endDate) {\r\n            dispatch(changeCardDates(dates, board, group.id, card, loggedInUser))\r\n        } else if (!dates.endDate) {\r\n            dispatch(changeCardDates(dates, board, group.id, card, loggedInUser))\r\n        }\r\n        closeDatePicker()\r\n    }\r\n\r\n    const onDeleteLabel = (labelId, { labelGroup, labelType }) => {\r\n        let label;\r\n        if (labelType === 'priority') label = { text: 'Set priority', color: '#cccccc', id: Math.random() }\r\n        else label = { text: 'No status yet', color: '#cccccc', id: Math.random() }\r\n        dispatch(deleteLabel({\r\n            board, groupId: group.id, labelId, labelGroup,\r\n            cardDetails: { cardId: card.id, labelType, label }\r\n        }))\r\n    }\r\n\r\n    const onChangeCardLabels = (label, labelGroup, labelType) => {\r\n        dispatch(changeCardLabels({ board, cardToUpdate: card, groupId: group.id, label, labelType, user: loggedInUser, labelGroup }))\r\n    }\r\n\r\n    const onAddCardLabel = (label, labelGroup) => {\r\n        dispatch(addCardLabel(board, group.id, label, labelGroup))\r\n    }\r\n\r\n    const closeDatePicker = () => {\r\n        setIsDateShown(false)\r\n    }\r\n\r\n    const workingDays = useMemo(() => {\r\n        const { endDate, startDate } = card.dueDate\r\n        let days;\r\n        let diff;\r\n        if (startDate && !endDate) {\r\n            if (new Date(startDate) < new Date()) {\r\n                diff = new Date(startDate) - new Date(card.createdAt)\r\n                days = Math.ceil(diff / (1000 * 60 * 60 * 24))\r\n                if (days <= 0) return '--'\r\n                days = Math.abs(days)\r\n            } else {\r\n                diff = new Date(startDate) - new Date()\r\n                days = Math.abs(Math.ceil(diff / (1000 * 60 * 60 * 24)))\r\n            }\r\n        } else if (!endDate && !startDate) days = '--'\r\n        else {\r\n            diff = new Date(startDate) - new Date(endDate)\r\n            days = Math.abs(Math.ceil(diff / (1000 * 60 * 60 * 24)))\r\n        }\r\n        return days\r\n    }, [card.dueDate])\r\n\r\n\r\n\r\n    const { availableBoardMembers, cardMembers } = useMemo(() => {\r\n        const availableBoardMembers = []\r\n        const cardMembers = []\r\n        boardMembers.forEach(boardMember => {\r\n            // if (!card.members.length) return true;\r\n            const mutualMember = card.members.find(cardMemberId => cardMemberId === boardMember._id)\r\n            if (!mutualMember) availableBoardMembers.push(boardMember)\r\n            else {\r\n                cardMembers.push(boardMember)\r\n            }\r\n        })\r\n        return { availableBoardMembers, cardMembers }\r\n    }, [boardMembers, card.members])\r\n\r\n    const cardMembersForDisplay = (cardMembers.length > 2) ? cardMembers.slice(0, 2) : cardMembers;\r\n\r\n    return (\r\n        <>\r\n            <Draggable\r\n                draggableId={card.id}\r\n                index={idx}\r\n            >\r\n                {(provided, snapshot) => (\r\n                    <div\r\n                        className=\"card-preview\"\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        ref={provided.innerRef}\r\n                    >\r\n                        {/* <div className=\"\" {...provided.dragHandleProps}>\r\n                            <DragIndicatorIcon />\r\n                        </div> */}\r\n                        <div className=\"card-color-div card-cell-small\" style={{ backgroundColor: group.style.color }}></div>\r\n                        <div className=\"card-title\">\r\n                            <EditableElement onChangeTitle={onChangeTitle}>{card.title}</EditableElement>\r\n                            <Delete onClick={() => setIsInDeleteMode(true)} />\r\n                        </div>\r\n                        <div className=\"card-members-cell\">\r\n                            <Link to={`/board/${board._id}/card/${card.id}`}>\r\n                                <ChatBubble />\r\n                            </Link>\r\n                        </div>\r\n                        {group.cardOrder.map((cardOrder, idx) => {\r\n                            if (idx === group.cardOrder.length - 1) {\r\n                                var isLast = group.cardOrder[idx] === 'status' || group.cardOrder[idx] === 'priority'\r\n                            }\r\n                            switch (cardOrder) {\r\n                                case 'members': {\r\n                                    return (\r\n                                        <div\r\n                                            key={cardOrder}\r\n                                            className=\"card-members relative card-members-cell\"\r\n                                            onClick={() => setAreMembersShown(!areMembersShown)}\r\n                                        >\r\n                                            {card.members.length >= 3 &&\r\n                                                <span className=\"members-count-badge\">\r\n                                                    {`+${card.members.length - 2}`}\r\n                                                </span>}\r\n                                            <div className={`flex justify-center align-center ${card.members.length >= 2 ? 'multiple-members-display' : ''}`}>\r\n                                                {(!cardMembersForDisplay.length) && <PersonIcon className=\"member-empty-avatar\" />}\r\n                                                {cardMembersForDisplay.map(member =>\r\n                                                    <MemberForDisplay\r\n                                                        key={member._id}\r\n                                                        backgroundColor={group.style.backgroundColor}\r\n                                                        member={member} />)}\r\n\r\n                                            </div>\r\n                                            {areMembersShown &&\r\n                                                <TaskMembersModal\r\n                                                    availableBoardMembers={availableBoardMembers}\r\n                                                    cardMembers={cardMembers}\r\n                                                    changeTaskMembers={onChangeTaskMembers}\r\n                                                    onCloseModal={() => setAreMembersShown(!areMembersShown)}\r\n                                                />\r\n                                            }\r\n                                        </div>\r\n                                    )\r\n                                }\r\n                                case 'status': {\r\n                                    return (\r\n                                        <div key={cardOrder} className=\"card-status card-cell\">\r\n                                            <LabelMenu\r\n                                                isScroll={isScroll}\r\n                                                isLast={isLast}\r\n                                                onDeleteLabel={onDeleteLabel}\r\n                                                onAddLabel={onAddCardLabel}\r\n                                                enableAdding={true}\r\n                                                onSaveLabel={onChangeCardLabels}\r\n                                                labelType='status'\r\n                                                labelGroup='statuses'\r\n                                                labels={group.statuses}\r\n                                                currLabel={card.status}\r\n                                            />\r\n                                        </div>\r\n                                    )\r\n                                } case 'date': {\r\n                                    return (\r\n                                        <ClickAwayListener key={cardOrder} onClickAway={(ev) => {\r\n                                            // if (ev.target.className === 'dateRange-container card-cell') return\r\n                                            closeDatePicker()\r\n                                        }}>\r\n                                            <div\r\n                                                className=\"dateRange-container card-cell\"\r\n                                                onClick={() => setIsDateShown(true)}\r\n                                            >\r\n                                                <ProgressBar\r\n                                                    onClick={() => setIsDateShown((isDateShown) => !isDateShown)}\r\n                                                    startDate={card.dueDate.startDate}\r\n                                                    endDate={card.dueDate.endDate}\r\n                                                    status={card.status}\r\n                                                    createdAt={card.createdAt}\r\n                                                    groupColor={group.style.color}\r\n                                                />\r\n                                                {isDateShown &&\r\n                                                    <DatePicker\r\n                                                        changeDates={onChangeCardDates}\r\n                                                        closeDatePicker={closeDatePicker}\r\n                                                        cardId={card.id}\r\n                                                    />\r\n                                                }\r\n                                            </div>\r\n                                        </ClickAwayListener>\r\n                                    )\r\n                                }\r\n                                case 'workingDays': {\r\n                                    return <div key={cardOrder} className=\"card-workingDays card-cell\">{workingDays}</div>\r\n                                }\r\n                                case 'priority': {\r\n                                    return (\r\n                                        <div key={cardOrder} className=\"card-priority card-cell\">\r\n                                            <LabelMenu\r\n                                                isScroll={isScroll}\r\n                                                isLast={isLast}\r\n                                                onDeleteLabel={onDeleteLabel}\r\n                                                onAddLabel={onAddCardLabel}\r\n                                                onSaveLabel={onChangeCardLabels}\r\n                                                enableAdding={false}\r\n                                                labelType='priority'\r\n                                                labelGroup='priorities'\r\n                                                labels={group.priorities}\r\n                                                currLabel={card.priority}\r\n                                            /></div>\r\n                                    )\r\n                                }\r\n\r\n                            }\r\n                        })}\r\n\r\n                        <div className=\"card-closer card-cell-small\"></div>\r\n                    </div>\r\n                )}\r\n            </Draggable>\r\n\r\n            {isInDeleteMode &&\r\n                <ConfirmModal\r\n                    id={card.id}\r\n                    arg={group}\r\n                    onApprove={onDeleteCard}\r\n                    close={() => setIsInDeleteMode(false)}\r\n                    isInDeleteMode={isInDeleteMode}\r\n                    title={card.title}\r\n                    type={'Card'}\r\n                />}\r\n        </>\r\n    )\r\n}","import { ListItemIcon, MenuItem, MenuList, Popover } from '@material-ui/core'\r\nimport SortIcon from '@material-ui/icons/Sort';\r\nimport React, { useState } from 'react'\r\n\r\nexport const GroupSortModal = ({ onSetGroupSort }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const handleClick = (ev) => {\r\n        setAnchorEl(ev.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const open = Boolean(anchorEl);\r\n    const id = open ? 'group-sort-modal-popover' : undefined;\r\n    return (\r\n        <>\r\n            <MenuItem aria-describedby={id} onClick={handleClick}>\r\n                <ListItemIcon >\r\n                    <SortIcon className=\"group-modal-icon\" />\r\n                </ListItemIcon>\r\n                <span>Sort By</span>\r\n            </MenuItem>\r\n            <Popover\r\n                id={id}\r\n                open={open}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'right',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList className=\"group-sort-modal\">\r\n                    <MenuItem onClick={() => onSetGroupSort('date')}>\r\n                        <ListItemIcon>\r\n                            <span>Date</span>\r\n                        </ListItemIcon>\r\n                    </MenuItem>\r\n                    <MenuItem onClick={() => onSetGroupSort('name')}>\r\n                        <ListItemIcon >\r\n                            <span>Name</span>\r\n                        </ListItemIcon>\r\n                    </MenuItem>\r\n                </MenuList>\r\n            </Popover></>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Colors } from '../Colors'\r\nimport BorderColorOutlinedIcon from '@material-ui/icons/BorderColorOutlined';\r\nimport { ClickAwayListener, ListItemIcon, MenuItem, Popover } from '@material-ui/core';\r\n\r\nexport const GroupColors = ({ onChangeColor, onCloseAll }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const handleClick = (ev) => {\r\n        setAnchorEl(ev.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const open = Boolean(anchorEl);\r\n    const id = open ? 'group-colors-popover' : undefined;\r\n    return (\r\n        <>\r\n            <MenuItem aria-describedby={id} onClick={handleClick}>\r\n                <ListItemIcon>\r\n                    <BorderColorOutlinedIcon className=\"btn-change-group-color\" />\r\n                </ListItemIcon>\r\n                <span> Change Group Color</span>\r\n            </MenuItem>\r\n            <Popover\r\n                id={id}\r\n                open={open}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'right',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <ClickAwayListener onClickAway={onCloseAll}>\r\n                    <div className=\"group-colors-container\">\r\n                        <Colors\r\n                            onClose={handleClose}\r\n                            onChangeColor={onChangeColor} />\r\n                    </div>\r\n                </ClickAwayListener>\r\n\r\n            </Popover></>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { ListItemIcon, MenuItem, MenuList, Popover } from '@material-ui/core';\r\nimport { changeGroupColor } from '../../store/actions/boardAction';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setMsg } from '../../store/actions/userAction';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { GroupSortModal } from './GroupSortModal';\r\nimport { GroupColors } from './GroupColors';\r\n\r\nexport const GroupMenu = ({ groupId, onSetGroupSort, onShowConfirmModal, id, handleClose, anchorEl, open }) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const board = useSelector(({ boardReducer }) => boardReducer.board)\r\n\r\n\r\n\r\n    const onChangeGroupColor = async (color) => {\r\n        dispatch(setMsg('Group color Successfully Change'))\r\n        await dispatch(changeGroupColor(color, board, groupId))\r\n        handleClose()\r\n    }\r\n\r\n    return (<>\r\n\r\n        <Popover\r\n            id={id}\r\n            open={open}\r\n            anchorEl={anchorEl}\r\n            onClose={handleClose}\r\n            anchorOrigin={{\r\n                vertical: 'bottom',\r\n                horizontal: 'right',\r\n            }}\r\n            transformOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'center',\r\n            }}\r\n        >\r\n            <MenuList className=\"group-menu-container\">\r\n                <GroupColors onCloseAll={handleClose}\r\n                    onChangeColor={onChangeGroupColor} />\r\n                <MenuItem onClick={onShowConfirmModal}>\r\n                    <ListItemIcon >\r\n                        <DeleteIcon />\r\n                    </ListItemIcon>\r\n                    <span>Delete Group</span>\r\n                </MenuItem>\r\n                <GroupSortModal onSetGroupSort={onSetGroupSort} />\r\n            </MenuList>\r\n        </Popover>\r\n    </>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { ConfirmModal } from '../ConfirmModal'\r\nimport { GroupMenu } from './GroupMenu'\r\nimport DragIndicatorIcon from '@material-ui/icons/DragIndicator';\r\nimport { EditableElement } from '../EditableElement';\r\nimport ArrowDropDownOutlinedIcon from '@material-ui/icons/ArrowDropDownOutlined';\r\nimport { Draggable, Droppable } from 'react-beautiful-dnd';\r\n\r\nexport const GroupHeader = ({ group, color, onSetGroupSort, provided, onChangeTitle, onRemoveGroup }) => {\r\n    const [isInDeleteMode, setIsInDeleteMode] = useState(false)\r\n    const [isMenuOnHover, setIsMenuOnHover] = useState(false)\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const getCardOrder = (cardOrder, provided, snapshot) => {\r\n\r\n        switch (cardOrder) {\r\n\r\n            case 'members': {\r\n                return <div\r\n                    className={`card-members-cell ${snapshot.isDragging ? 'group-header-drag' : ''}`}\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                    ref={provided.innerRef}><h4>Members</h4>\r\n                </div >\r\n            }\r\n            case 'date': {\r\n                return <div\r\n                    className={`card-cell ${snapshot.isDragging ? 'group-header-drag' : ''}`}\r\n                    {...provided.dragHandleProps}\r\n                    {...provided.draggableProps}\r\n                    ref={provided.innerRef}>\r\n                    <h4>Date range</h4>\r\n                </div>\r\n            }\r\n            case 'workingDays': {\r\n                return <div\r\n                    className={`card-cell ${snapshot.isDragging ? 'group-header-drag' : ''}`}\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                    ref={provided.innerRef}><h4>Working Days</h4>\r\n                </div >\r\n            }\r\n            case 'priority': {\r\n                return <div\r\n                    className={`card-cell ${snapshot.isDragging ? 'group-header-drag' : ''}`}\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                    ref={provided.innerRef}><h4>Priority</h4>\r\n                </div >\r\n\r\n\r\n            }\r\n            case 'status': {\r\n                return <div\r\n                    className={`card-cell ${snapshot.isDragging ? 'group-header-drag' : ''}`}\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                    ref={provided.innerRef}><h4>Status</h4>\r\n                </div >\r\n            }\r\n        }\r\n    }\r\n    const handleClick = (ev) => {\r\n        setAnchorEl(ev.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const open = Boolean(anchorEl);\r\n    const id = open ? 'group-menu-popover' : undefined;\r\n\r\n    return (<>\r\n        <ArrowDropDownOutlinedIcon\r\n            onMouseEnter={() => setIsMenuOnHover(true)}\r\n            onMouseLeave={() => setIsMenuOnHover(false)}\r\n            aria-describedby={id}\r\n            onClick={handleClick}\r\n            className=\"group-menu-icon\" style={{\r\n                backgroundColor: isMenuOnHover ? '#f9f9f9' : color,\r\n                color: !isMenuOnHover ? '#f9f9f9' : color,\r\n                border: `1px solid ${color}`\r\n            }}\r\n        />\r\n        <div className=\"group-header\">\r\n            <GroupMenu\r\n                id={id}\r\n                anchorEl={anchorEl}\r\n                open={open}\r\n                groupId={group.id}\r\n                onSetGroupSort={onSetGroupSort}\r\n                handleClose={handleClose}\r\n                onShowConfirmModal={() => setIsInDeleteMode(true)}\r\n                setIsInDeleteMode={setIsInDeleteMode}\r\n                color={color}\r\n            />\r\n            {isInDeleteMode && <ConfirmModal\r\n                id={group}\r\n                onApprove={onRemoveGroup}\r\n                isInDeleteMode={isInDeleteMode}\r\n                close={() => setIsInDeleteMode(false)}\r\n                title={group.title}\r\n                type={'Group'}\r\n            />}\r\n            <div className=\"drag-icon\" {...provided.dragHandleProps}>\r\n                <DragIndicatorIcon />\r\n            </div>\r\n            <h2 className=\"group-header-title\" style={{ color }}>\r\n                <EditableElement onChangeTitle={onChangeTitle}>\r\n                    {group.title}\r\n                </EditableElement>\r\n            </h2>\r\n            <Droppable droppableId={`group-${group.id}`} type=\"group-header\" direction=\"horizontal\">\r\n                {provided => (\r\n                    <div className=\"droppable-group-header\"\r\n                        ref={provided.innerRef}\r\n                        {...provided.droppableProps}\r\n                    >\r\n                        {group.cardOrder.map((cardOrder, idx) => {\r\n                            return <Draggable key={cardOrder} draggableId={cardOrder + '-' + group.id} index={idx}>\r\n                                {(provided, snapshot) => (\r\n                                    getCardOrder(cardOrder, provided, snapshot)\r\n                                )}\r\n\r\n                            </Draggable>\r\n                        })}\r\n                        {provided.placeholder}\r\n                    </div>\r\n                )}\r\n            </Droppable>\r\n        </div>\r\n    </>\r\n    )\r\n}\r\n","import { CardPreview } from \"../CardPreview\";\r\nimport React, { useEffect, useMemo, useRef, useState } from 'react'\r\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport { boardService } from \"../../services/boardService\";\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport { utilService } from \"../../services/utilService\";\r\nimport { GroupHeader } from \"./GroupHeader\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\n// componentDidUpdate(prevProps, prevState) {\r\n//     if (!prevProps.onDrag && props.onDrag) setState({ sortGroupBy: '' })\r\n// }\r\n\r\nexport const GroupPreview = ({ onAddCard, group, onChangeGroupTitle, onDrag, onDeleteCard, onRemoveGroup, idx }) => {\r\n\r\n    const [cardTitle, setCardTitle] = useState('')\r\n    const [placeholder, setPlaceholder] = useState('+ Add')\r\n    const [sortGroupBy, setSortGroupBy] = useState('')\r\n    const isScroll = useSelector((state) => state.boardReducer.isScroll)\r\n    const dispatch = useDispatch()\r\n    const timeoutId = useRef(null)\r\n\r\n    useEffect(() => {\r\n\r\n        return () => {\r\n            clearTimeout(timeoutId.current)\r\n        }\r\n    }, [])\r\n\r\n    const handleChange = (ev) => {\r\n        const { value } = ev.target\r\n        setCardTitle(() => value)\r\n    }\r\n\r\n    const handleAddCardSubmit = (ev) => {\r\n        ev.preventDefault()\r\n        if (!cardTitle || !cardTitle.replace(/\\s/g, '').length) {\r\n            setPlaceholder(() => 'Activity required')\r\n            setCardTitle(() => '')\r\n            setTimeout(() => setPlaceholder(() => '+Add Activity'), 1000)\r\n            return\r\n        }\r\n        onAddCard(cardTitle, group.id)\r\n        setCardTitle(() => '')\r\n    }\r\n\r\n    const onChangeTitle = (groupTitle) => {\r\n        onChangeGroupTitle(groupTitle, group.id)\r\n    }\r\n\r\n    const handleScroll = () => {\r\n        clearTimeout(timeoutId.current)\r\n        if (!isScroll) dispatch({ type: 'GROUP_SCROLL', isScroll: true })\r\n        timeoutId.current = setTimeout(() => {\r\n            dispatch({ type: 'GROUP_SCROLL', isScroll: false })\r\n        }, 200)\r\n    }\r\n\r\n    const groupForDisplay = useMemo(() => {\r\n        if (onDrag) return group\r\n        else {\r\n            const groupCopy = JSON.parse(JSON.stringify(group))\r\n            let cards;\r\n            if (sortGroupBy && !onDrag) {\r\n                if (sortGroupBy === 'name') cards = boardService.sortByTitle(groupCopy.cards)\r\n                else cards = boardService.sortCardByDate(groupCopy.cards)\r\n                groupCopy.cards = cards\r\n            }\r\n            return groupCopy\r\n        }\r\n    }, [sortGroupBy, group, onDrag])\r\n\r\n    const countStatus = useMemo(() => {\r\n        const group = groupForDisplay\r\n        const statusCount = group.cards.reduce((acc, card) => {\r\n            // acc[card.status.text] = acc[card.status.text] ? acc[card.status.text] + 1 : 1;\r\n            const { color } = card.status\r\n            const { text } = card.status\r\n            acc[text] = acc[text] ?\r\n                { color, count: acc[card.status.text].count + 1 } : { color, count: 1 };\r\n            return acc;\r\n        }, {})\r\n\r\n        Object.keys(statusCount).forEach(key => {\r\n            // if (key === 'No status yet') statusCount[key].count = 0\r\n            statusCount[key].count = Math.round((statusCount[key].count / group.cards.length) * 100);\r\n        })\r\n        return statusCount\r\n    }, [groupForDisplay])\r\n\r\n    // const statusCount = countStatus\r\n    const { color } = groupForDisplay.style;\r\n    return (\r\n        <Draggable draggableId={groupForDisplay.id} index={idx}>\r\n            {(provided) => (\r\n                <div className=\"group-container flex column\"\r\n                    onScroll={handleScroll}\r\n                    {...provided.draggableProps}\r\n                    ref={provided.innerRef}>\r\n                    <GroupHeader\r\n                        color={color}\r\n                        onSetGroupSort={(sortBy) => setSortGroupBy(sortBy)}\r\n                        onRemoveGroup={onRemoveGroup}\r\n                        group={groupForDisplay}\r\n                        provided={provided}\r\n                        onChangeTitle={onChangeTitle}\r\n                    />\r\n                    <Droppable droppableId={groupForDisplay.id} isCombineEnabled type='card'>\r\n                        {(provided) => (\r\n                            <div\r\n                                className=\"group-droppable\"\r\n                                {...provided.dragHandleProps}\r\n                                {...provided.droppableProps}\r\n                                ref={provided.innerRef}>\r\n                                {groupForDisplay.cards.map((card, idx) => {\r\n                                    return (\r\n                                        <CardPreview\r\n                                            key={card.id}\r\n                                            card={card}\r\n                                            idx={idx}\r\n                                            group={groupForDisplay}\r\n                                            onDeleteCard={onDeleteCard}\r\n                                        />\r\n                                    )\r\n                                })}\r\n                                {provided.placeholder}\r\n                            </div>\r\n                        )}\r\n                    </Droppable>\r\n                    <div className=\"group-bottom-section-input\">\r\n                        <div style={{ backgroundColor: `${color}66` }}></div>\r\n                        <form onSubmit={handleAddCardSubmit}>\r\n                            <input\r\n                                className=\"add-card-input\"\r\n                                type=\"text\"\r\n                                placeholder={placeholder}\r\n                                name=\"activity\"\r\n                                autoComplete=\"off\"\r\n                                value={cardTitle}\r\n                                onChange={handleChange}\r\n                            />\r\n                            <button type=\"submit\" className=\"add-card-btn\">Add</button>\r\n                        </form>\r\n                        <div style={{ backgroundColor: '#E6E9EF' }}></div>\r\n                    </div>\r\n                    <div className=\"group-bottom-section-utils\">\r\n                        <div className=\"progress-status\">\r\n                            {Object.keys(countStatus).map((key, idx) => {\r\n                                const id = utilService.makeId()\r\n                                return < div\r\n                                    key={idx}\r\n                                    style={{ width: countStatus[key].count + '%', background: countStatus[key].color }}\r\n                                    data-tip data-for={id}\r\n                                >\r\n                                    <ReactTooltip\r\n                                        className=\"sunday-tooltip\"\r\n                                        id={id}\r\n                                        place=\"bottom\"\r\n                                        effect=\"solid\"\r\n                                    >\r\n                                        <span className=\"tool-tip-txt\">\r\n                                            {`${key} ${Math.floor(countStatus[key].count)}% ${Math.ceil((countStatus[key].count * group.cards.length) / 100)}/${group.cards.length}`}\r\n                                        </span>\r\n                                    </ReactTooltip>\r\n                                </div>\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n            }\r\n        </Draggable>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport ReactTooltip from 'react-tooltip'\r\n\r\nexport function FilterOptions({ labels, onSetFilterLabels, content }) {\r\n    return (\r\n        <div>\r\n            {Object.keys(labels).map((key, idx) => {\r\n                return < div key={idx} data-tip data-for={`${content}${key}`}\r\n                    className={`item ${labels[key].isSelect ? 'selected' : ''}`} onClick={(ev) => onSetFilterLabels(content, key)}>\r\n                    <span className=\"status-circle\" style={{ background: labels[key].color }}></span>\r\n                    <span>{key}</span>\r\n                    <ReactTooltip className=\"sunday-tooltip\" id={`${content}${key}`} place=\"bottom\" effect=\"solid\">\r\n                        {`${content.charAt(0).toUpperCase()+content.substring(1)} is ${key}`}\r\n                    </ReactTooltip>\r\n                </div>\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { ClickAwayListener } from '@material-ui/core';\r\nimport { utilService } from '../services/utilService';\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport { FilterOptions } from './FilterOptions';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport SwapVertIcon from '@material-ui/icons/SwapVert';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport { MemberForDisplay } from './members-components/MemberForDisplay';\r\n\r\nexport class BoardFilter extends Component {\r\n    state = {\r\n        filterBy: {\r\n            txt: '',\r\n            membersId: [],\r\n            status: [],\r\n            priority: [],\r\n            sortBy: '',\r\n            statusesForDisplay: null,\r\n            priorityForDisplay: null\r\n        },\r\n        isShowMenuFilter: false,\r\n        isMobileFiltersOpen: false\r\n    }\r\n    componentDidMount() {\r\n        this.setStatuses()\r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.board !== this.props.board) this.setStatuses()\r\n    }\r\n\r\n    handelChange = (ev) => {\r\n        const value = ev.target.value\r\n        const filterBy = { ...this.state.filterBy }\r\n        filterBy[ev.target.name] = value;\r\n        this.setState({ filterBy }, () => this.props.onSetFilter(this.state.filterBy));\r\n    }\r\n    cleanInput = () => {\r\n        const copyFilter = { ...this.state.filterBy }\r\n        copyFilter.txt = '';\r\n        this.setState({ filterBy: copyFilter }, () => this.props.onSetFilter({ ...this.state.filterBy }))\r\n    }\r\n    onCloseFilterMenu = () => {\r\n        this.setState({ isShowMenuFilter: !this.state.isShowMenuFilter })\r\n    }\r\n    onSetFilterLabels = (label, text) => {\r\n        const copyFilter = { ...this.state.filterBy }\r\n        if (copyFilter[label].includes(text)) {\r\n            const newLabels = copyFilter[label].filter(label => label !== text)\r\n            copyFilter[label] = newLabels\r\n        }\r\n        else copyFilter[label] = [...copyFilter[label], text]\r\n        const copyStatusForDispaly = { ...this.state.statusesForDisplay }\r\n        const copyPriorityForDisplay = { ...this.state.priorityForDisplay }\r\n        if (label === 'status') copyStatusForDispaly[text].isSelect = !this.state.statusesForDisplay[text].isSelect\r\n        if (label === 'priority') copyPriorityForDisplay[text].isSelect = !this.state.priorityForDisplay[text].isSelect\r\n        this.setState({ filterBy: copyFilter, statusesForDisplay: copyStatusForDispaly, priorityForDisplay: copyPriorityForDisplay },\r\n            () => this.props.onSetFilter({ ...this.state.filterBy }))\r\n    }\r\n\r\n    onSetFilter = (ev) => {\r\n        const { value, name } = ev.target\r\n        const filterBy = { ...this.state.filterBy }\r\n        filterBy[name] = value;\r\n        this.setState({ filterBy }, () => this.props.onSetFilter({ ...this.state.filterBy }));\r\n    }\r\n\r\n    onGetMember = (memberId) => {\r\n        const copyFilter = { ...this.state.filterBy }\r\n        if (copyFilter.membersId.includes(memberId)) {\r\n            const newMmbers = copyFilter.membersId.filter(member => member !== memberId)\r\n            copyFilter.membersId = newMmbers\r\n        }\r\n        else copyFilter.membersId = [...copyFilter.membersId, memberId]\r\n        this.setState({ filterBy: copyFilter }, () => this.props.onSetFilter({ ...this.state.filterBy }))\r\n    }\r\n\r\n    toggleMobileFilters = () => {\r\n        const { isMobileFiltersOpen } = this.state;\r\n        this.setState({ isMobileFiltersOpen: !isMobileFiltersOpen });\r\n    }\r\n\r\n\r\n    setStatuses() {\r\n        const { board } = this.props\r\n        for (let i = 0; i < 2; i++) {\r\n            var labels = {};\r\n            let key = i === 0 ? 'statuses' : 'priorities'\r\n            board.groups.forEach(group => {\r\n                var currGroup = group[key].reduce((acc, status) => {\r\n                    acc[status.text] = { color: status.color, isSelect: false };\r\n                    return acc;\r\n                }, {})\r\n                labels = { ...labels, ...currGroup }\r\n            })\r\n            if (i === 0) this.setState({ statusesForDisplay: labels })\r\n            else this.setState({ priorityForDisplay: labels })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { isShowMenuFilter, statusesForDisplay, priorityForDisplay, isMobileFiltersOpen } = this.state\r\n        const { boardMembers } = this.props\r\n        if (!statusesForDisplay || !priorityForDisplay) return null\r\n        const boardFilter = <section className=\"board-filter\">\r\n            <div className=\"search-field\">\r\n                <SearchIcon />\r\n                <input type=\"text\" placeholder=\"Search\" name=\"txt\" value={this.state.filterBy.txt} onChange={this.handelChange} autoComplete=\"off\" />\r\n                {/* <button className=\"clean-input-btn\" onClick={() => this.cleanInput()}>x</button> */}\r\n            </div>\r\n            <span className=\"clickable-filter-category\" onClick={this.onCloseFilterMenu}><FilterListIcon /> Filter</span>\r\n            {isShowMenuFilter && <ClickAwayListener onClickAway={(ev) => {\r\n                if (ev.target.offsetParent?.className === 'groups-filter' || ev.target.className === 'groups-filter') return\r\n                this.onCloseFilterMenu()\r\n            }\r\n            }>\r\n                <div className=\"relative\">\r\n                    <section className=\"groups-filter\" ref={this.useRef}>\r\n                        <div className=\"status-filter\">\r\n                            <div className=\"option-continer\">\r\n                                <h3>Status</h3>\r\n                                <FilterOptions onSetFilterLabels={this.onSetFilterLabels} content='status' labels={statusesForDisplay} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"member-filter\">\r\n                            <div className=\"option-continer\">\r\n                                <h3>Member</h3>\r\n                                {boardMembers.map(member => {\r\n                                    return <div className=\"item\" key={member._id}\r\n                                        onClick={() => this.onGetMember(member._id)} data-tip data-for={member._id}>\r\n                                        <MemberForDisplay member={member} isFilterDisplay={true} />\r\n                                    </div>\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"priority-filter\">\r\n                            <div className=\"option-continer\">\r\n                                <h3>Priority</h3>\r\n                                <FilterOptions onSetFilterLabels={this.onSetFilterLabels} content='priority' labels={priorityForDisplay} />\r\n                            </div>\r\n                        </div>\r\n                    </section>\r\n                </div>\r\n            </ClickAwayListener>\r\n            }\r\n\r\n            {/* <div className=\"clickable-filter-category select-with-icon\">\r\n                <select className=\"clickable-filter-category\" onChange={this.onSetFilter} name=\"sortBy\"  >\r\n                    <option value=\"sort\">Sort</option>\r\n                    <option value=\"name\">Name</option>\r\n                    <option value=\"date\">Date</option>\r\n                </select>\r\n                <SwapVertIcon />\r\n            </div> */}\r\n        </section >\r\n\r\n\r\n        return <React.Fragment>\r\n            <div className=\"board-filter-wrapper-desktop\">\r\n                {boardFilter}\r\n            </div>\r\n            {isMobileFiltersOpen && <ClickAwayListener onClickAway={this.toggleMobileFilters}>\r\n                <div className=\"board-filter-wrapper-mobile\">\r\n                    {boardFilter}\r\n                </div>\r\n            </ClickAwayListener>\r\n            }\r\n            <div className=\"filter-menu-mobile\">\r\n                <MoreVertIcon onClick={this.toggleMobileFilters} />\r\n            </div>\r\n        </React.Fragment>\r\n    }\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport { Link } from 'react-router-dom'\r\nimport { utilService } from '../services/utilService.js';\r\nimport { ClickAwayListener } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { query } from '../store/actions/userAction'\r\nimport { SearchInput } from './SearchInput.jsx';\r\nimport { userService } from '../services/userService.js';\r\nimport { MemberList } from './members-components/MemberList.jsx';\r\n\r\nexport const _BoardMembers = ({ changeBoardMemebrs, onCloseModalMembers, query, boardMembers }) => {\r\n    const [users, setUsers] = useState([])\r\n\r\n    const onSetFilter = async (txt) => {\r\n        if (!txt) {\r\n            setUsers([])\r\n            return;\r\n        }\r\n        const users = await query(txt);\r\n        const usersNotInBoard = users.filter(user => {\r\n            const mutualMember = boardMembers.find(member => member._id === user._id);\r\n            if (mutualMember) return false;\r\n            return true;\r\n        })\r\n        setUsers(usersNotInBoard)\r\n    }\r\n\r\n    const onChangeBoardMemebrs = (userToUpdate, sign) => {\r\n        const updatedUsers = users.filter(user => user._id !== userToUpdate._id)\r\n        setUsers(updatedUsers)\r\n        changeBoardMemebrs(userToUpdate, sign)\r\n    }\r\n\r\n    return <ClickAwayListener onClickAway={(ev) => {\r\n        if (ev.target.tagName === 'svg' || ev.target.className === 'board-member-status top-section-item') return\r\n        onCloseModalMembers()\r\n    }}>\r\n        <div className=\"members-modal-basic\" >\r\n            <div>\r\n                <h3>Add users to this board</h3>\r\n                <div>\r\n                    <SearchInput onSetFilter={onSetFilter} placeHolder='members' />\r\n                </div>\r\n                {users.map(user => {\r\n                    return <div key={user._id} className=\"flex align-center space-between member-row\" >\r\n                        <Link to={`/user/${user._id}/general`} >\r\n                            <div className=\"flex align-center space-between\">\r\n                                {user.imgUrl ? <img src={user.imgUrl} className=\"user-thumbnail\" alt=\"\" /> :\r\n                                    <span className=\"user-thumbnail\">{utilService.getNameInitials(user.fullname)}</span>}\r\n                                <span className=\"modal-user-full-name\">{user.fullname}</span>\r\n                            </div>\r\n                        </Link>\r\n                        <AddIcon onClick={() => onChangeBoardMemebrs(user, 'add')} className=\"remove-icon\" />\r\n                    </div>\r\n                })}\r\n            </div>\r\n            <div>\r\n                <h3>Board Members</h3>\r\n                <MemberList\r\n                    members={boardMembers}\r\n                    onUpdateMembers={onChangeBoardMemebrs}\r\n                    type='remove' />\r\n            </div>\r\n        </div>\r\n    </ClickAwayListener>\r\n\r\n}\r\n\r\n\r\nconst mapGlobalStateToProps = (state) => {\r\n    return {\r\n        loggedInUser: state.userReducer.loggedInUser,\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    query\r\n}\r\n\r\nexport const BoardMembers = connect(mapGlobalStateToProps, mapDispatchToProps)(_BoardMembers)\r\n\r\n","import { useGetUser } from \"../../custom-hooks/useGetUser\"\r\nimport { Link } from 'react-router-dom'\r\nimport { utilService } from '../../services/utilService'\r\nimport moment from 'moment'\r\nimport { useSelector } from \"react-redux\"\r\n//check about name with eyal byMember || user\r\nexport function BoardActivitiesPreview({ activity, user }) {\r\n    let byMember = useGetUser(activity.byMember)\r\n    const board = useSelector(state => state.boardReducer.board)\r\n\r\n\r\n    return (\r\n        byMember && <div className=\"activity\">\r\n            <div>\r\n                <Link to={`/user/${byMember._id}`}>  {byMember.imgUrl ? <img src={byMember.imgUrl} className=\"user-thumbnail\" alt=\"avatar\" /> :\r\n                    <div className=\"user-thumbnail\">{\r\n                        byMember.imgUrl ? <img src={byMember.imgUrl} alt=\"avatar\" /> :\r\n                            utilService.getNameInitials(byMember.fullname)\r\n                    }</div>}</Link>\r\n                <div>\r\n                    <h2>{byMember.fullname}</h2>\r\n                    <h4>{moment(activity.createdAt).from(Date.now())}</h4>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <h4 >{`${byMember._id === user._id ? 'You' : byMember.fullname} ${activity.txt}`}</h4>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { BoardActivitiesPreview } from './BoardActivitiesPreview';\r\n\r\n// TODO: think of way to opti,ize activity calls\r\nexport const BoardActivitiesList = ({ activityFilterText, activities, content, user, title, clear, handleChange }) => {\r\n    return <div>\r\n        {title && <div className=\"activity-filter\">\r\n            <h2 className=\"activities-board-title\"><span>{title}</span> Activities</h2>\r\n            <div>\r\n                <div className=\"search-field relative\">\r\n                    <SearchIcon />\r\n                    <input\r\n                        value={activityFilterText}\r\n                        type=\"text\"\r\n                        name=\"activity\"\r\n                        placeholder=\"search\"\r\n                        autoComplete=\"off\"\r\n                        onChange={handleChange} />\r\n                </div>\r\n                <button onClick={clear}>Clear</button>\r\n            </div>\r\n        </div>}\r\n        <span>{content}</span>\r\n        <div className=\"activity-list\">\r\n            {activities.map(activity =>\r\n                <BoardActivitiesPreview\r\n                    key={activity.id}\r\n                    activity={activity} user={user} />)}\r\n        </div>\r\n    </div>\r\n}\r\n","\r\nimport { useEffect, useMemo, useState } from 'react'\r\nimport { EditableElement } from './EditableElement';\r\nimport PeopleOutlineIcon from '@material-ui/icons/PeopleOutline';\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport { BoardFilter } from './BoardFilter';\r\nimport { BoardMembers } from './BoardMembers';\r\nimport { BoardActivitiesList } from './board-activities-components/BoardActivitiesList';\r\nimport { boardService } from '../services/boardService';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport { useGetUser } from '../custom-hooks/useGetUser';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nexport const BoardHeader = ({ board, onAddGroup, onChangeTitle, onChangeBoardMemebrs, onSetFilter,\r\n    loggedInUser, boardMembers }) => {\r\n\r\n    const [isShowBoardMember, setIsShowBoardMember] = useState(false)\r\n    const [isShowActivities, setIsShowActivities] = useState(false)\r\n    const [activityFilterText, setActivityFilterText] = useState('')\r\n    // const boardOwner = useGetUser(board.createdBy)\r\n    const dispatch = useDispatch()\r\n\r\n    const toggleMembersModal = () => {\r\n        setIsShowBoardMember(!isShowBoardMember)\r\n    }\r\n\r\n    const showActivities = async (isClear) => {\r\n        setIsShowActivities(!isShowActivities)\r\n        const boardToUpdate = await boardService.updateActivities(board)\r\n        dispatch({ type: 'SET_CURR_BOARD', board: boardToUpdate })\r\n    }\r\n\r\n    const handleChange = (ev) => setActivityFilterText(ev.target.value)\r\n\r\n    const activitiesForDisplay = useMemo(() => {\r\n        const { activities } = board\r\n        const filterRegex = new RegExp(activityFilterText, 'i');\r\n        const filteredActivities = activities.filter(activity => {\r\n            return filterRegex.test(activity.txt) || filterRegex.test(activity.byMember.fullname)\r\n        })\r\n        return filteredActivities\r\n    }, [board.activities, activityFilterText])\r\n    const unReadActivities = useMemo(() => activitiesForDisplay.filter(activity => !activity.isRead), [activitiesForDisplay])\r\n    const activities = useMemo(() => activitiesForDisplay.filter(activity => activity.isRead), [activitiesForDisplay])\r\n    const boardOwner = useMemo(() => boardMembers.find(member => board.createdBy === member._id), [board.boardOwner])\r\n\r\n\r\n    return <section className=\"board-header flex column space-between\">\r\n        <div className=\"flex align-center board-header-top-section\">\r\n            <div className=\"board-name-and-owner\">\r\n                <h2><EditableElement onChangeTitle={onChangeTitle}>{board.title}</EditableElement></h2>\r\n                <h4>{''}Owner :{boardOwner?.fullname}</h4>\r\n            </div>\r\n            <div className=\"flex space-between relative\">\r\n                <span className=\"board-member-status top-section-item\" data-tip data-for=\"members\"\r\n                    onClick={toggleMembersModal}> <PeopleOutlineIcon />/{board.members.length}</span>\r\n                {isShowBoardMember && <BoardMembers\r\n                    boardMembers={boardMembers}\r\n                    changeBoardMemebrs={onChangeBoardMemebrs} onCloseModalMembers={toggleMembersModal} />}\r\n\r\n                <span\r\n                    className=\"activity-display top-section-item\"\r\n                    onClick={() => setIsShowActivities(true)}\r\n                >\r\n                    Activities\r\n                    <span style={{ color: unReadActivities.length ? '#0085ff' : '' }}>\r\n                        {unReadActivities.length}\r\n                    </span>\r\n                    /{board.activities.length}\r\n                </span>\r\n\r\n                <div className={`${isShowActivities ? 'close-Activities' : ''}`} onClick={showActivities}>\r\n                </div>\r\n                <div className={`activities ${isShowActivities ? 'open' : ''}`}>\r\n                    <ArrowBackIcon onClick={showActivities} />\r\n                    <BoardActivitiesList\r\n                        activityFilterText={activityFilterText}\r\n                        handleChange={handleChange}\r\n                        activities={unReadActivities}\r\n                        user={loggedInUser}\r\n                        clear={async () => {\r\n                            const boardToUpdate = await boardService.updateActivities(board, true)\r\n                            dispatch({ type: 'SET_CURR_BOARD', board: boardToUpdate })\r\n                        }}\r\n                        title={board.title}\r\n                        content={`New Activities: ${unReadActivities.length}`} />\r\n                    <BoardActivitiesList\r\n                        activities={activities}\r\n                        user={loggedInUser}\r\n                        content={`Activities Read: ${activities.length}`} />\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n\r\n        <div className=\"flex space-between align-flex-end p-m2\">\r\n            <div className=\"switch-view\" >\r\n                {/* <select onChange={changeBoardView} name=\"\">\r\n                    <option value=\"board\">Board</option>\r\n                    <option value=\"dashboard\">DashBoard</option>\r\n                </select> */}\r\n            </div>\r\n            <div className=\"board-options flex align-flex-end relative\">\r\n                <BoardFilter onSetFilter={onSetFilter} board={board} boardMembers={boardMembers} />\r\n                <button className=\"add-item\" onClick={() => onAddGroup()}>New group</button>\r\n            </div>\r\n        </div>\r\n        <ReactTooltip className=\"sunday-tooltip\" id=\"members\" place=\"bottom\" effect=\"solid\">\r\n            Who is on this board?\r\n        </ReactTooltip>\r\n    </section>\r\n}\r\n\r\n\r\n","// import { Bar, Doughnut, Line, Pie } from 'react-chartjs-2';\r\nimport React, { Component } from 'react'\r\n\r\nimport Chart from 'react-apexcharts';\r\nimport { useGetUser } from '../custom-hooks/useGetUser';\r\nimport { userService } from '../services/userService';\r\n\r\n\r\nexport const DashBoard = ({ board }) => {\r\n\r\n\r\n    const cardStatusByMember = async () => {\r\n        let cardsByMembers = {}\r\n        let cardsMembers = []\r\n        board.groups.forEach(group => {\r\n            group.cards.forEach(async card => {\r\n                Promise.all(card.members.map(async (memberId) => {\r\n                    return await userService.getUserById(memberId)\r\n                })).then(cardsMembers=>{\r\n                    cardsMembers.forEach(member => {\r\n                        if (!cardsByMembers[member.fullname]) {\r\n                            cardsByMembers[member.fullname] = [{ status: card.status }]\r\n                        } else {\r\n                            cardsByMembers[member.fullname].push({ status: card.status })\r\n                        }\r\n                    })\r\n                })\r\n            })\r\n        })\r\n        var prevText = ''\r\n        var prevName = ''\r\n        // var counter = 0\r\n        var values = {};\r\n        var backgroundColor = [];\r\n        for (let key in cardsByMembers) {\r\n            cardsByMembers[key].forEach((card) => {\r\n                const idx = backgroundColor.indexOf(card.status.color)\r\n                if (idx < 0) backgroundColor.push(card.status.color)\r\n\r\n            })\r\n\r\n\r\n            cardsByMembers[key].forEach((card, idx, arr) => {\r\n\r\n                if (values[card.status.text]) {\r\n                    if (prevName === key && prevText === card.status.text) {\r\n\r\n                        const copy = values[card.status.text].data[values[card.status.text].data.length - 1] + 1\r\n                        // values[card.status.text].data.pop()\r\n                        values[card.status.text].data.splice(values[card.status.text].data.length - 1, 1, copy)\r\n\r\n                    } else if (prevName !== key && prevText === card.status.text) {\r\n                        values[card.status.text].data.push(1)\r\n                    } else if (prevName === key && prevText !== card.status.text) {\r\n                        values[card.status.text].data.push(1)\r\n                        // values[card.status.text].data.splice(values[card.status.text].data.length - 1, 0, 1)\r\n\r\n                    }\r\n\r\n                } else {\r\n                    values[card.status.text] = { data: [1], name: card.status.text }\r\n                }\r\n                prevName = key\r\n                prevText = card.status.text\r\n            })\r\n\r\n\r\n        }\r\n        const options = {\r\n\r\n            colors: backgroundColor,\r\n\r\n            // colors: backgroundColor,\r\n            chart: {\r\n                type: 'bar',\r\n                height: '100%',\r\n                width: '100%',\r\n                stacked: true,\r\n                toolbar: {\r\n                    show: true\r\n                },\r\n                zoom: {\r\n                    enabled: true\r\n                }\r\n            },\r\n            responsive: [],\r\n            plotOptions: {\r\n                bar: {\r\n                    horizontal: false,\r\n                },\r\n            },\r\n            xaxis: {\r\n                categories: Object.keys(cardsByMembers),\r\n\r\n            },\r\n            yaxis: {\r\n                lines: {\r\n                    show: true,\r\n                }\r\n            },\r\n            legend: {\r\n                position: 'right',\r\n                offsetY: 0\r\n            },\r\n            fill: {\r\n                opacity: 1\r\n            }\r\n        };\r\n        const series = Object.values(values)\r\n\r\n        return { options, series }\r\n\r\n    }\r\n\r\n\r\n    const value = cardStatusByMember()\r\n    // const { board } = this.props\r\n    // const hi = this.cardStatusByMember()\r\n\r\n    return (\r\n        <div>\r\n            <Chart options={value.options}\r\n                series={value.series}\r\n                type=\"bar\"\r\n                width={'70%'}\r\n                height={'300%'} />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/clouds.420e35cb.svg\";","import React from 'react'\r\nimport clouds from '../assets/img/clouds.svg'\r\nexport const NoResultsPlaceholder = ({msg}) => {\r\n    return (\r\n        <div className=\"no-results\">\r\n            <img src={clouds} alt=\"clouds\" style={{ maxWidth: \"200px\" }} />\r\n            <h2 style={{ fontWeight: \"300\" }}>{msg}</h2>\r\n        </div>\r\n    )\r\n}\r\n","import { useMemo, useState } from 'react'\r\nimport { connect, useDispatch, useSelector } from 'react-redux';\r\nimport { GroupPreview } from './group-preview-components/GroupPreview';\r\nimport { BoardHeader } from './BoardHeader';\r\nimport {\r\n    loadBoards, addCard, addGroup, changeBoardTitle, changeGroupTitle, changeBoardMemebrs,\r\n    changeGroupColor, removeGroup, changeGroupIdx, changeCardIdx, getKeyById, dragStart, dragEnd\r\n} from '../store/actions/boardAction.js'\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\r\nimport { DashBoard } from './DashBoard';\r\nimport { boardService } from '../services/boardService'\r\nimport { setMsg } from '../store/actions/userAction.js';\r\nimport { NoResultsPlaceholder } from './NoResultsPlaceholder';\r\n\r\n\r\n\r\nexport const BoardPreview = (props) => {\r\n    const [filterBy, setFilterBy] = useState(null)\r\n    const [isShowDashboard, setIsShowDashboard] = useState(false)\r\n\r\n    const { board, onDrag, boardMembers } = useSelector(({ boardReducer }) => boardReducer)\r\n    const loggedInUser = useSelector(({ userReducer }) => userReducer.loggedInUser)\r\n    const dispatch = useDispatch()\r\n\r\n    const onAddCard = (cardTitle, groupId) => {\r\n        dispatch(addCard({ cardTitle, groupId, board, user: loggedInUser }))\r\n        dispatch(setMsg('Card Successfully Added'))\r\n    }\r\n    const onAddGroup = () => {\r\n        dispatch(addGroup(board, loggedInUser))\r\n    }\r\n    //Board Title\r\n    const onChangeTitle = (boardTitle) => {\r\n        dispatch(changeBoardTitle(boardTitle, board, loggedInUser))\r\n    }\r\n    //Group Title\r\n    const onChangeGroupTitle = (groupTitle, groupId) => {\r\n        dispatch(changeGroupTitle({ board, groupId, groupTitle, user: loggedInUser }))\r\n    }\r\n    const onChangeBoardMemebrs = (memberData, type) => {\r\n        dispatch(changeBoardMemebrs(memberData, board, type, loggedInUser));\r\n    }\r\n    const onRemoveGroup = (group) => {\r\n        dispatch(removeGroup(board, group, loggedInUser))\r\n        dispatch(setMsg('Group Successfully Removed'))\r\n    }\r\n    // onChangeBoardMemebrs = async (memberData, type) => {\r\n    //     console.log(memberData);\r\n    //     const { changeBoardMemebrs, loggedInUser, board } = this.props;\r\n    //     await changeBoardMemebrs(memberData, board, type, loggedInUser);\r\n    // }\r\n\r\n    // onRemoveGroup = async (group) => {\r\n    //     const { removeGroup, board, loggedInUser } = this.props;\r\n    //     await removeGroup(board, group, loggedInUser)\r\n    //     this.props.setMsg('Group Successfully Removed')\r\n    // }\r\n    const onDragStart = () => {\r\n        dispatch(dragStart())\r\n    }\r\n    // onDragEnd = (result) => {\r\n    //     props.onDragEnd()\r\n    //     const { destination, source, draggableId } = result\r\n    //     if (!destination) return\r\n    //     if (destination.droppableId === source.droppableId && destination.index === source.index || !destination.droppableId || !source.droppableId) return\r\n    //     const { changeGroupIdx, changeCardIdx, board } = props\r\n    //     const boardToUpdate = JSON.parse(JSON.stringify(board))\r\n    //     if (result.type === 'group') {\r\n    //         const newGroups = boardToUpdate.groups.map((group, idx, groups) => {\r\n    //             if (idx === source.index) return groups[destination.index]\r\n    //             if (idx === destination.index) return groups[source.index]\r\n    //             else return group\r\n    //         })\r\n    //         boardToUpdate.groups = newGroups;\r\n    //         changeGroupIdx(boardToUpdate, result)\r\n    //     }\r\n    //     else {\r\n    //         const sourceGroup = boardService.getKeyById(boardToUpdate, source.droppableId)\r\n    //         var cardToAdd = boardService.getKeyById(sourceGroup, draggableId)\r\n    //         const groups = boardToUpdate.groups.map(group => {\r\n    //             if (group.id === source.droppableId && group.id !== destination.droppableId) {\r\n    //                 group.cards.splice(source.index, 1)\r\n    //                 return group\r\n    //             } else if (group.id !== source.droppableId && group.id === destination.droppableId) {\r\n    //                 if (!cardToAdd) {\r\n    //                     cardToAdd = boardService.getKeyById(group, draggableId)\r\n    //                 }\r\n    //                 group.cards.splice(destination.index, 0, cardToAdd)\r\n    //                 return group\r\n    //             } else if (group.id === source.droppableId && group.id === destination.droppableId) {\r\n    //                 group.cards = group.cards.map((card, idx, cards) => {\r\n    //                     if (idx === source.index) return cards[destination.index]\r\n    //                     if (idx === destination.index) return cards[source.index]\r\n    //                     else return card\r\n    //                 })\r\n    //                 return group\r\n    //             } else return group\r\n    //         })\r\n    //         boardToUpdate.groups = groups\r\n    //         changeCardIdx(boardToUpdate, result)\r\n    //     }\r\n    // }\r\n\r\n    const onDragEnd = (result) => {\r\n        const { destination, source, draggableId, type } = result\r\n        if (!destination) return;\r\n        if (destination.droppableId === source.droppableId && destination.index === source.index) return;\r\n        const boardToUpdate = { ...board }\r\n        const newGroups = Array.from(boardToUpdate.groups)\r\n        if (type === 'group') {\r\n            const draggedGroup = boardToUpdate.groups.find(group => group.id === draggableId)\r\n            newGroups.splice(source.index, 1)\r\n            newGroups.splice(destination.index, 0, draggedGroup)\r\n            boardToUpdate.groups = newGroups\r\n            dispatch(changeGroupIdx(boardToUpdate))\r\n        } else if (type === 'card') {\r\n            const sourceGroup = boardToUpdate.groups.find(group => group.id === source.droppableId)\r\n            const destinationGroup = boardToUpdate.groups.find(group => group.id === destination.droppableId)\r\n            if (sourceGroup.id === destinationGroup.id) {\r\n                const newCards = Array.from(sourceGroup.cards)\r\n                const newCard = sourceGroup.cards.find(card => card.id === draggableId)\r\n                newCards.splice(source.index, 1)\r\n                newCards.splice(destination.index, 0, newCard)\r\n                const newGroup = {\r\n                    ...sourceGroup,\r\n                    cards: newCards\r\n                }\r\n                const newIdx = boardToUpdate.groups.findIndex(group => group.id === newGroup.id)\r\n                boardToUpdate.groups.splice(newIdx, 1, newGroup)\r\n                dispatch(changeCardIdx(boardToUpdate))\r\n            } else {\r\n                const sourceGroupCards = Array.from(sourceGroup.cards)\r\n                sourceGroupCards.splice(source.index, 1)\r\n                const newSourceGroup = {\r\n                    ...sourceGroup,\r\n                    cards: sourceGroupCards\r\n                }\r\n                const destinationGroupCards = Array.from(destinationGroup.cards)\r\n                const newCardToPaste = sourceGroup.cards.find(card => card.id === draggableId)\r\n                destinationGroupCards.splice(destination.index, 0, newCardToPaste)\r\n                const newDestinationGroup = {\r\n                    ...destinationGroup,\r\n                    cards: destinationGroupCards\r\n                }\r\n                const sourceIdx = boardToUpdate.groups.findIndex(group => group.id === newSourceGroup.id)\r\n                const destinationIdx = boardToUpdate.groups.findIndex(group => group.id === newDestinationGroup.id)\r\n                boardToUpdate.groups.splice(sourceIdx, 1, newSourceGroup)\r\n                boardToUpdate.groups.splice(destinationIdx, 1, newDestinationGroup)\r\n                dispatch(changeCardIdx(boardToUpdate))\r\n            }\r\n        } else {\r\n            const groupId = source.droppableId.substring(source.droppableId.indexOf('-') + 1)\r\n            const groupIdx = newGroups.findIndex(group => group.id === groupId)\r\n            const [sourceColumn] = newGroups[groupIdx].cardOrder.splice(source.index, 1)\r\n            newGroups[groupIdx].cardOrder.splice(destination.index, 0, sourceColumn)\r\n            boardToUpdate.groups = newGroups\r\n            dispatch(changeCardIdx(boardToUpdate))\r\n        }\r\n    }\r\n\r\n    const changeBoardView = ({ target }) => {\r\n        const { value } = target\r\n        if (value === 'dashboard') setIsShowDashboard(true)\r\n        else setIsShowDashboard(false)\r\n    }\r\n    const onSetFilter = (filterBy) => {\r\n        setFilterBy(filterBy)\r\n    }\r\n\r\n    const filteredBoard = useMemo(() => {\r\n        const boardCopy = JSON.parse(JSON.stringify(board))\r\n        if (filterBy) {\r\n            if (filterBy.status.length) {\r\n                boardCopy.groups = boardCopy.groups.filter(group => {\r\n                    const filteredCards = group.cards.filter(card => {\r\n                        const status = filterBy.status.find(label => {\r\n                            return card.status.text === label\r\n                        });\r\n                        if (!status) return false\r\n                        return true\r\n                    })\r\n                    if (filteredCards.length) {\r\n                        group.cards = filteredCards\r\n                        return true\r\n                    }\r\n                    return false\r\n                })\r\n            }\r\n            if (filterBy.priority.length) {\r\n                boardCopy.groups = boardCopy.groups.filter(group => {\r\n                    const filteredCards = group.cards.filter(card => {\r\n                        const priority = filterBy.priority.find(label => {\r\n                            return card.priority.text === label\r\n                        });\r\n                        if (!priority) return false\r\n                        return true\r\n                    })\r\n                    if (filteredCards.length) {\r\n                        group.cards = filteredCards\r\n                        return true\r\n                    }\r\n                    return false\r\n                })\r\n            }\r\n            if (filterBy.membersId.length) {\r\n                boardCopy.groups = boardCopy.groups.filter(group => {\r\n                    const filteredCards = group.cards.filter(card => {\r\n                        const member = card.members.find(memberId => {\r\n                            return (filterBy.membersId.includes(memberId))\r\n                        })\r\n                        if (!member) return false\r\n                        return true\r\n                    })\r\n                    if (filteredCards.length) {\r\n                        group.cards = filteredCards\r\n                        return true\r\n                    }\r\n                    return false\r\n                })\r\n            }\r\n            if (filterBy.sortBy && !onDrag) {\r\n                if (filterBy.sortBy === 'name') boardCopy.groups = boardService.sortByTitle(boardCopy.groups)\r\n                else boardCopy.groups = boardService.sortByDate(boardCopy.groups)\r\n            }\r\n            const filterRegex = new RegExp(filterBy.txt, 'i');\r\n            boardCopy.groups = boardCopy.groups.filter(group => {\r\n                const filteredCards = group.cards.filter(card => filterRegex.test(card.title))\r\n                if (filteredCards.length) {\r\n                    group.cards = filteredCards\r\n                    return true\r\n                } else return false\r\n                    || filterRegex.test(group.title)\r\n            })\r\n        }\r\n        return boardCopy\r\n    }, [filterBy, board])\r\n    return (\r\n        <div className=\"board-preview-container\">\r\n            <BoardHeader\r\n                loggedInUser={loggedInUser}\r\n                board={board}\r\n                boardMembers={boardMembers}\r\n                onAddGroup={onAddGroup}\r\n                changeBoardView={changeBoardView}\r\n                onChangeTitle={onChangeTitle}\r\n                onChangeBoardMemebrs={onChangeBoardMemebrs}\r\n                onSetFilter={onSetFilter}\r\n            />\r\n            {isShowDashboard && <DashBoard board={board} />}\r\n            {!isShowDashboard &&\r\n                <DragDropContext onDragEnd={onDragEnd} onDragStart={onDragStart}>\r\n                    <div className=\"main-groups-container\">\r\n                        <Droppable droppableId={board._id} isCombineEnabled type='group'>\r\n                            {(provided) => (\r\n                                <div\r\n                                    ref={provided.innerRef}\r\n                                    {...provided.droppableProps}>\r\n                                    {!filteredBoard.groups.length ? <NoResultsPlaceholder msg='No results were found...'/> :\r\n                                        filteredBoard.groups.map((group, idx) => (\r\n                                            <GroupPreview\r\n                                                key={group.id}\r\n                                                group={group}\r\n                                                onDrag={onDrag}\r\n                                                onAddCard={onAddCard}\r\n                                                board={board}\r\n                                                onRemoveGroup={onRemoveGroup}\r\n                                                onChangeGroupTitle={onChangeGroupTitle}\r\n                                                idx={idx}\r\n                                            />\r\n                                        ))}\r\n                                    {provided.placeholder}\r\n                                </div>\r\n                            )}\r\n                        </Droppable>\r\n                    </div>\r\n                </DragDropContext>}\r\n        </div>\r\n    )\r\n}\r\n","import axios from 'axios';\r\n\r\n\r\n\r\nexport const cloudinaryService = {\r\n    uploadImg\r\n}\r\n\r\n\r\nasync function uploadImg(url) {\r\n    const CLOUD_NAME = \"dptiv4ajc\"\r\n    const UPLOAD_PRESET = \"rolpcssu\"\r\n    const UPLOAD_URL = `https://api.cloudinary.com/v1_1/${CLOUD_NAME}/image/upload`\r\n\r\n    const formData = new FormData();\r\n    formData.append('file', url)\r\n    formData.append('upload_preset', UPLOAD_PRESET);\r\n    try {\r\n        const res = await axios.post(`${UPLOAD_URL}`, formData)\r\n        return res.data.url\r\n\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n}\r\n","import { Link } from 'react-router-dom'\r\nimport React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { getKeyById } from '../store/actions/boardAction.js'\r\nimport SunEditor /*{ buttonList }*/ from \"suneditor-react\";\r\nimport 'suneditor/dist/css/suneditor.min.css';\r\nimport { cloudinaryService } from '../services/cloudinary-service.js';\r\nimport { addCardUpdate } from '../store/actions/boardAction.js'\r\nimport { utilService } from '../services/utilService.js';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport moment from 'moment';\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport { ClickAwayListener } from '@material-ui/core';\r\n\r\nclass _CardUpdates extends Component {\r\n    state = {\r\n        card: null,\r\n        cardUpdate: {\r\n            byMember: null,\r\n            type: 'txt',\r\n            value: '',\r\n            title: ''\r\n        },\r\n        isLoading: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { cardId } = this.props.match.params\r\n        if (cardId) {\r\n            this.getCard(cardId)\r\n            this.setState({ isOpen: true })\r\n        }\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.match.params !== this.props.match.params) {\r\n            const { cardId } = this.props.match.params\r\n            this.getCard(cardId)\r\n        }\r\n    }\r\n\r\n    getCard = async (cardId) => {\r\n        const { boards, getKeyById } = this.props\r\n        const card = await getKeyById(boards, cardId)\r\n        this.setState({ card })\r\n    }\r\n\r\n\r\n    handleChange = (content) => {\r\n        const copyUpdate = { ...this.state.cardUpdate }\r\n        const regex = /(<([^>]+)>)/ig\r\n        if (!content.replace(regex, '').length) {\r\n            copyUpdate.value = ''\r\n            this.setState({ cardUpdate: copyUpdate })\r\n            return\r\n        }\r\n        copyUpdate.value = content\r\n        this.setState({ cardUpdate: copyUpdate })\r\n    }\r\n\r\n    uploadImg = async (ev) => {\r\n        const copyUpdate = { ...this.state.cardUpdate }\r\n        if (!ev.target.files[0]) return\r\n        copyUpdate.value = '<h1>Loading...</h1>'\r\n        this.setState({ isLoading: true, cardUpdate: copyUpdate })\r\n        const imgUrl = await cloudinaryService.uploadImg(ev.target.files[0]);\r\n        copyUpdate.value = imgUrl\r\n        copyUpdate.type = 'img'\r\n        this.setState({ cardUpdate: copyUpdate, isLoading: false })\r\n    }\r\n\r\n\r\n    onImageUploadBefore = () => {\r\n        const copyUpdate = { ...this.state.cardUpdate }\r\n        copyUpdate.type = 'img'\r\n        this.setState({ cardUpdate: copyUpdate })\r\n        return true\r\n    }\r\n\r\n    onAddUpdate = (ev) => {\r\n        ev.preventDefault()\r\n        const regex = /(<([^>]+)>)/ig\r\n        const copyUpdate = { ...this.state.cardUpdate }\r\n        if (!copyUpdate.value.replace(regex, '').length) {\r\n            copyUpdate.value = ''\r\n            this.setState({ cardUpdate: copyUpdate })\r\n            return\r\n        }\r\n        if (copyUpdate.type === 'img') {\r\n            copyUpdate.value = copyUpdate.value.replace(regex, '')\r\n        }\r\n\r\n        copyUpdate.byMember = this.props.loggedInUser\r\n        this.props.addCardUpdate(copyUpdate, this.props.board, this.state.card)\r\n        this.setState({\r\n            cardUpdate: {\r\n                byMember: null,\r\n                value: '',\r\n                title: '',\r\n                type: 'txt'\r\n\r\n            },\r\n            isOpen: false\r\n        })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const { board } = this.props\r\n        const { card, cardUpdate } = this.state\r\n        if (!card || !board) return null\r\n        const htmlUpdates = card.updates.reduce((acc, update) => {\r\n            if (update.type === 'txt') acc += `<div class=\"update txt-update\">\r\n                                                <div class=\"update-header flex space-between align-center\">\r\n                                                    <div class=\"update-writer flex align-center\">\r\n                                                        <span class=\"user-thumbnail\">${utilService.getNameInitials(update.byMember.fullname)}</span>\r\n                                                        <h5>${update.byMember.fullname}</h5>\r\n                                                    </div>\r\n                                                    <span class=\"created-at\">${moment(update.createdAt).from(Date.now())}</span>\r\n                                                </div>\r\n                                                <div class=\"update-body\">${update.value}</div>\r\n                                               </div>`\r\n            else if (update.type === 'img') acc += `<div class=\"update txt-update\">\r\n                                                <div class=\"update-header flex space-between align-center\">\r\n                                                 <div class=\"update-writer flex align-center\">\r\n                                                        <span class=\"user-thumbnail\">${utilService.getNameInitials(update.byMember.fullname)}</span>\r\n                                                        <h5>${update.byMember.fullname}</h5>\r\n                                                    </div>\r\n                                                    <span class=\"created-at\">${moment(update.createdAt).from(Date.now())}</span>\r\n                                                </div>\r\n                                                <div class=\"update-body\"><img class=\"img-update\" src=\"${update.value}\"/>\r\n                                                </div></div>\r\n                                            </div>`\r\n\r\n            return acc\r\n\r\n        }, '')\r\n        return (\r\n            <ClickAwayListener onClickAway={()=>this.props.history.push(`/board/${board._id}`)}>\r\n                <section className={`card-updates open`}>\r\n                    <Link className=\"back-arrow\" to={`/board/${board._id}`} onClick={() => this.setState({ isOpen: false })}><ArrowBackIcon /></Link>\r\n                    <small className=\"created-at\">Created at : {new Date(card.createdAt).toDateString()}</small>\r\n                    <div className=\"updates-card-header flex align-center space-between\">\r\n                        <h2 className=\"card-update-title\">{this.state.card.title}</h2>\r\n                        <span className=\"card-status\" style={{ backgroundColor: card.status.color }}>{card.status.text}</span>\r\n                    </div>\r\n                    <div className=\"text-editor-wrapper\">\r\n                        <form onSubmit={this.onAddUpdate}>\r\n                            <SunEditor placeholder=\"Write an update...\"\r\n                                onChange={this.handleChange}\r\n                                onDrop={this.handleDrop}\r\n                                setDefaultStyle=\"\"\r\n                                setOptions={{\r\n                                    buttonList: [\r\n                                        ['bold', 'underline', 'italic', 'strike', 'fontColor', 'fontSize', 'align', 'link', 'image'],],\r\n                                    // ['formatBlock', 'font', 'fontSize',],\r\n                                    // ['fontColor', 'hiliteColor', 'align',],\r\n                                    // ['removeFormat'], ['table', 'link', 'image', 'video'], ['codeView', 'fullScreen'], ['print']],\r\n                                    imageResizing: false\r\n\r\n                                }}\r\n                                // onImageUpload={this.uploadImg}\r\n                                // onImageUploadBefore={this.onImageUploadBefore}\r\n                                setContents={cardUpdate.value}\r\n\r\n                            />\r\n                            <div className=\"updates-bottom-btns flex space-between align-center\">\r\n                                <label className=\"upload-file-label\"><CloudUploadIcon /> Upload image\r\n                                    <input type=\"file\" onChange={this.uploadImg} /></label>\r\n                                <button className=\"card-update-btn add-item\">Update</button>\r\n                            </div>\r\n\r\n                        </form>\r\n\r\n                    </div>\r\n                    <div className=\"updates-container\">\r\n                        <div dangerouslySetInnerHTML={{ __html: htmlUpdates }} />\r\n                    </div>\r\n                </section>\r\n            </ClickAwayListener>\r\n        )\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\nconst mapGlobalStateToProps = (state) => {\r\n    return {\r\n        loggedInUser: state.userReducer.loggedInUser,\r\n        boards: state.boardReducer.boards,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    getKeyById,\r\n    addCardUpdate\r\n}\r\n\r\n\r\nexport const CardUpdates = connect(mapGlobalStateToProps, mapDispatchToProps)(_CardUpdates);\r\n\r\n\r\n\r\n\r\n","\n\nexport const Loader = () => {\n  return (\n    <svg className=\"loader-svg\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" style={{\n\n      margin: 'auto', background: 'rgb(255, 255, 255)', display: 'block', shapeRendering: 'auto'\n    }\n    }\n      width=\"200px\" height=\"200px\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid\">\n      <g transform=\"translate(50 50)\">\n        <g transform=\"scale(0.8)\">\n          <g transform=\"translate(-50 -50)\">\n            <g>\n              <animateTransform attributeName=\"transform\" type=\"rotate\" repeatCount=\"indefinite\" values=\"0 50 50;360 50 50\" keyTimes=\"0;1\" dur=\"0.7575757575757576s\"></animateTransform>\n              <path fillOpacity=\"0.89\" fill=\"#ffcc00\" d=\"M50 50L50 0A50 50 0 0 1 100 50Z\"></path>\n            </g>\n            <g>\n              <animateTransform attributeName=\"transform\" type=\"rotate\" repeatCount=\"indefinite\" values=\"0 50 50;360 50 50\" keyTimes=\"0;1\" dur=\"1.0101010101010102s\"></animateTransform>\n              <path fillOpacity=\"0.89\" fill=\"#00ca72\" d=\"M50 50L50 0A50 50 0 0 1 100 50Z\" transform=\"rotate(90 50 50)\"></path>\n            </g>\n            <g>\n              <animateTransform attributeName=\"transform\" type=\"rotate\" repeatCount=\"indefinite\" values=\"0 50 50;360 50 50\" keyTimes=\"0;1\" dur=\"1.5151515151515151s\"></animateTransform>\n              <path fillOpacity=\"0.89\" fill=\"#fb275d\" d=\"M50 50L50 0A50 50 0 0 1 100 50Z\" transform=\"rotate(180 50 50)\"></path>\n            </g>\n            <g>\n              <animateTransform attributeName=\"transform\" type=\"rotate\" repeatCount=\"indefinite\" values=\"0 50 50;360 50 50\" keyTimes=\"0;1\" dur=\"3.0303030303030303s\"></animateTransform>\n              <path fillOpacity=\"0.89\" fill=\"rgba(255, 255, 255, 0)\" d=\"M50 50L50 0A50 50 0 0 1 100 50Z\" transform=\"rotate(270 50 50)\"></path>\n            </g>\n          </g>\n        </g>\n      </g>\n    </svg>\n\n  )\n}","import React, { Component, useEffect, useState } from 'react'\r\nimport { connect, useDispatch, useSelector } from 'react-redux'\r\nimport { MainSideBar } from '../cmps/MainSideBar'\r\nimport { BoardSideBar } from '../cmps/BoardSideBar'\r\nimport { BoardPreview } from '../cmps/BoardPreview'\r\nimport { loadBoards, removeBoard, getBoardById, addBoard, updateBoards, setBoardMembers } from '../store/actions/boardAction.js'\r\nimport { logOut, setMsg, updateReadNotifications, cleanNotifications, updateUserNotifications } from '../store/actions/userAction.js'\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\nimport { boardService } from '../services/boardService'\r\nimport { socketService } from '../services/socketService'\r\nimport { Route } from 'react-router-dom';\r\nimport { Redirect } from 'react-router-dom'\r\nimport { CardUpdates } from '../cmps/CardUpdates'\r\nimport { userService } from '../services/userService'\r\nimport { Loader } from '../assets/img/Loader'\r\nimport { NoResultsPlaceholder } from '../cmps/NoResultsPlaceholder'\r\n\r\nexport const BoardApp = ({ match, history }) => {\r\n    const [isBoardSideBarOpen, setIsBoardSideBarOpen] = useState(window.innerWidth >= 800)\r\n    const [boardTitle, setBoardTitle] = useState('')\r\n    const dispatch = useDispatch()\r\n    const { msg, loggedInUser } = useSelector((state) => state.userReducer)\r\n    const { boards, board, isScroll, isLoading } = useSelector((state) => state.boardReducer)\r\n    const [action, setAction] = useState('')\r\n\r\n    useEffect(() => {\r\n        const { boardId } = match.params\r\n        if (!boardId) return\r\n        if (boardId !== board?._id) dispatch({ type: 'SET_LOADING', isLoading: true })\r\n        if (window.innerWidth <= 800) setIsBoardSideBarOpen(false)\r\n        if (boardTitle) setBoardTitle('')\r\n        socketService.emit('joinBoard', boardId)\r\n        dispatch(getBoardById(boardId))\r\n\r\n    }, [match.params])\r\n\r\n\r\n    useEffect(() => {\r\n        if (board) initializeBoardMembers()\r\n\r\n    }, [board?.members])\r\n\r\n    useEffect(() => {\r\n        if (isScroll) setIsBoardSideBarOpen(false)\r\n\r\n    }, [isScroll])\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        initializeBoards()\r\n        return () => {\r\n            socketService.off('boardUpdate', updateBoardsInStore)\r\n            socketService.off('updateUser', updateUserInStore)\r\n            socketService.terminate()\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (action === 'add') {\r\n            history.push(`/board/${boards[boards.length - 1]._id}`)\r\n            setAction('')\r\n        }\r\n        else if (action === 'load') {\r\n            if (boards.length) {\r\n                history.push(`/board/${boards[0]._id}`)\r\n                socketService.emit('boardId', boards[0]._id)\r\n                setAction('')\r\n            } else {\r\n                dispatch({ type: 'SET_LOADING', isLoading: false })\r\n            }\r\n        }\r\n    }, [boards.length])\r\n\r\n    const initializeBoards = async () => {\r\n        if (!loggedInUser) {\r\n            history.push('/')\r\n            return\r\n        }\r\n        dispatch({ type: 'SET_LOADING', isLoading: true })\r\n        const { boardId } = match.params;\r\n        socketService.setup()\r\n        socketService.emit('userSocket', loggedInUser)\r\n        socketService.on('boardUpdate', updateBoardsInStore)\r\n        socketService.on('updateUser', updateUserInStore)\r\n        if (!boardId && !boards.length) {\r\n            setAction('load')\r\n            dispatch(loadBoards(loggedInUser._id))\r\n        } else if (!boardId && boards.length) {\r\n            history.push(`/board/${boards[0]._id}`)\r\n        }\r\n        else if (!boards.length && boardId) dispatch(loadBoards(loggedInUser._id))\r\n        if (boardId) {\r\n            dispatch(getBoardById(boardId))\r\n        }\r\n    }\r\n\r\n    const initializeBoardMembers = async () => {\r\n        // const members = await Promise.all(board?.members.map(async memberId => {\r\n        //     return await userService.getUserById(memberId)\r\n        // }))\r\n        const members = await userService.getUsersById(board.members)\r\n        dispatch(setBoardMembers(members))\r\n        setTimeout(dispatch, 1800, { type: 'SET_LOADING', isLoading: false });\r\n    }\r\n\r\n    const updateBoardsInStore = (board) => {\r\n        dispatch(updateBoards(board))\r\n    }\r\n\r\n    const updateUserInStore = (user) => {\r\n        dispatch(updateUserNotifications(user))\r\n    }\r\n\r\n    const onDeleteBoard = async (boardId, boardIdx) => {\r\n        await dispatch(removeBoard(boardId))\r\n        if (boardId === board._id) {\r\n            const currBoardId = boardService.getBoardIdByIdx(boardIdx, boards)\r\n            if (currBoardId) history.push(`/board/${currBoardId}`)\r\n            else {\r\n                dispatch({ type: 'SET_CURR_BOARD', board: null })\r\n                history.push('/board')\r\n            }\r\n        }\r\n        dispatch(setMsg('Board Successfully Deleted'))\r\n    }\r\n\r\n    const onAddBoard = async (boardTitle) => {\r\n        setAction('add')\r\n        await dispatch(addBoard(boardTitle, loggedInUser._id))\r\n        dispatch(setMsg('Board Successfully Added'))\r\n    }\r\n\r\n    const getBoardsForDisplay = () => {\r\n        const filterRegex = new RegExp(boardTitle, 'i');\r\n        return boards.filter(board => filterRegex.test(board.title));\r\n\r\n    }\r\n\r\n    if (!loggedInUser) return <Redirect exact to=\"/\" />\r\n    if (isLoading || action === 'add') return <Loader />\r\n    return (\r\n        <div className=\"board-app-container\">\r\n            <MainSideBar\r\n                onLogOut={() => dispatch(logOut())}\r\n                user={loggedInUser}\r\n                onCleanNotifications={() => dispatch(cleanNotifications(loggedInUser))}\r\n                onUpdateNotifications={() => dispatch(updateReadNotifications(loggedInUser))}\r\n            />\r\n            <div className=\"flex board-and-sidebar-container\">\r\n                <div className={`board-sidebar-container ${!isBoardSideBarOpen ? 'closed' : ''}`}>\r\n                    <button className=\"toggle-board-sidebar\" onClick={() => setIsBoardSideBarOpen(!isBoardSideBarOpen)}>\r\n                        {isBoardSideBarOpen ? <ArrowBackIcon /> : <ArrowForwardIcon />}\r\n                    </button>\r\n                    <BoardSideBar\r\n                        boards={getBoardsForDisplay()}\r\n                        onDeleteBoard={onDeleteBoard}\r\n                        onAddBoard={onAddBoard}\r\n                        user={loggedInUser}\r\n                        onSetFilter={(boardTitle) => setBoardTitle(boardTitle)}\r\n                    />\r\n                </div>\r\n                {board ? <BoardPreview /> : <NoResultsPlaceholder msg='Create your first board...' />}\r\n                <Route path={`${match.path}/card/:cardId`} render={(props) => {\r\n                    return <CardUpdates board={board} {...props} />\r\n                }} />\r\n                {msg && <div className=\"snackbar slide-top\">{msg}</div>}\r\n            </div>\r\n        </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/undrawtask.3bbcbb76.svg\";","import React from 'react'\r\nimport undrawtask from '../assets/img/undrawtask.svg';\r\nimport { HomeHeader } from '../cmps/HomeHeader';\r\nimport { connect, useDispatch } from 'react-redux';\r\nimport { checkLogin, updateUserNotifications } from '../store/actions/userAction.js'\r\nimport { loadBoards } from '../store/actions/boardAction.js'\r\nimport { useEffect } from 'react';\r\n\r\nexport function _Home(props) {\r\n   \r\n    return <div className=\"home-main-container\">\r\n        <HomeHeader />\r\n        <div className=\"home-hero\">\r\n            <div className=\"home-hero-inner\" >\r\n                <div className=\"home-hero-titles flex\">\r\n                    <h2>Join the <span>Sunday</span> revolution</h2>\r\n                    <h3>Manage your project with the team, all in one workspace</h3>\r\n                    <button onClick={async () => {\r\n                        try {\r\n                            const user = await props.checkLogin({\r\n                                username: \"guest\",\r\n                                password: \"12345678\"\r\n                            })\r\n                            if (user) {\r\n                                const boards = await props.loadBoards(user._id)\r\n                                const path = (boards.length) ? `/board/${boards[0]._id}` : '/board'\r\n                                props.history.push(path)\r\n                            }\r\n                        } catch (err) {\r\n                            console.log(err);\r\n                        }\r\n                    }}>Get started!</button>\r\n                </div>\r\n                <img src={undrawtask} alt=\"undraw task img\" />\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\nconst mapGlobalStateToProps = (state) => {\r\n    return {}\r\n}\r\nconst mapDispatchToProps = {\r\n    checkLogin,\r\n    loadBoards,\r\n    updateUserNotifications\r\n}\r\nexport const Home = connect(mapGlobalStateToProps, mapDispatchToProps)(_Home)\r\n\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport ArrowForwardOutlinedIcon from '@material-ui/icons/ArrowForwardOutlined';\r\nimport DashboardOutlinedIcon from '@material-ui/icons/DashboardOutlined';\r\nimport AssignmentOutlinedIcon from '@material-ui/icons/AssignmentOutlined';\r\nimport AlternateEmailIcon from '@material-ui/icons/AlternateEmail';\r\nimport { boardService } from '../../services/boardService';\r\n\r\n\r\nexport class GeneralUserInfo extends Component {\r\n    state = {\r\n        boards: null\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const { user } = this.props;\r\n        const boards = await boardService.query(user._id);\r\n        this.setState({ boards });\r\n    }\r\n\r\n\r\n    getActiveCards = () => {\r\n        const { boards } = this.state;\r\n        const { user } = this.props;\r\n        const count = boards.reduce((acc, board) => {\r\n            board.groups.forEach(group => {\r\n                group.cards.forEach(card => {\r\n                    card.members.forEach(memberId => {\r\n                        if (memberId === user._id && card.status.text !== 'Done') {\r\n                            const activeCard = {\r\n                                id: card.id,\r\n                                title: card.title,\r\n                                status: card.status,\r\n                                boardId: board._id\r\n                            }\r\n                            acc.push(activeCard);\r\n                        }\r\n                    })\r\n                })\r\n            })\r\n            return acc;\r\n        }, [])\r\n        return count;\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const { user } = this.props;\r\n        const { boards } = this.state;\r\n        if (!boards) return null;\r\n        const activeCards = this.getActiveCards();\r\n        return <div className=\"general-container\">\r\n            <div className=\"general-inner-container\">\r\n                <div className=\"list-container boards-list\">\r\n                    <div className=\"list-title-container\">\r\n                        <h2>Boards</h2>\r\n                        <DashboardOutlinedIcon />\r\n                    </div>\r\n                    <div className=\"list-items-container\">\r\n                        {!boards.length ? <h3>No boards to show</h3> :\r\n                            boards.map(board => {\r\n                                return <div key={board._id} className=\"info-row\">\r\n                                    <Link to={`/board/${board._id}`}>\r\n                                        <span>{board.title}</span>\r\n                                        <ArrowForwardOutlinedIcon />\r\n                                    </Link>\r\n                                </div>\r\n                            })}\r\n                    </div>\r\n                </div>\r\n                <div className=\"list-container active-cards-list\">\r\n                    <div className=\"list-title-container\">\r\n                        <h2>Active cards</h2>\r\n                        <AssignmentOutlinedIcon />\r\n                    </div>\r\n                    <div className=\"list-items-container\">\r\n                        {!activeCards ? <h3>No active cards to show</h3> :\r\n                            activeCards.map(card => {\r\n                                return <div className=\"info-row\" key={card.id}>\r\n                                    <Link\r\n                                        style={{ borderLeft: `7px solid ${card.status.color}` }}\r\n                                        to={`/board/${card.boardId}/card/${card.id}`}\r\n                                    >\r\n                                        <span>{card.title}</span>\r\n                                    </Link>\r\n                                </div>\r\n                            })}\r\n                    </div>\r\n                </div>\r\n                <div className=\"list-container personal-info-list\">\r\n                    <div className=\"list-title-container\">\r\n                        <h2>Contact information</h2>\r\n                        <AssignmentOutlinedIcon />\r\n                    </div>\r\n                    <div className=\"list-items-container\">\r\n                        <div className=\"info-row\">\r\n                            <a href={`mailto:${user.email}`}>\r\n                                <AlternateEmailIcon />\r\n                                <span>{user.email}</span>\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div >\r\n    }\r\n}\r\n\r\n\r\n// export const GeneralUserInfo = () => {\r\n//     return (\r\n//         <div>\r\n\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport { cloudinaryService } from '../../services/cloudinary-service';\r\nimport { utilService } from '../../services/utilService';\r\nimport { updateUser } from '../../store/actions/userAction';\r\nimport { connect } from 'react-redux'\r\n\r\nexport class _UpdateProfile extends Component {\r\n\r\n    state = {\r\n        user: {\r\n            _id: '',\r\n            fullname: '',\r\n            dateofbirth: '',\r\n            imgUrl: '',\r\n            tel: ''\r\n        },\r\n        triggerMsg: false,\r\n        isLoading: false\r\n    }\r\n\r\n    validatePhoneNumber = (tel) => {\r\n        const isValid = /^(?:(?:(\\+?972|\\(\\+?972\\)|\\+?\\(972\\))(?:\\s|\\.|-)?([1-9]\\d?))|(0[23489]{1})|(0[57]{1}[0-9]))(?:\\s|\\.|-)?([^0\\D]{1}\\d{2}(?:\\s|\\.|-)?\\d{4})$/gm.test(tel);\r\n        return isValid;\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { user } = this.props;\r\n        this.setState({ user });\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.user !== this.props.user) this.setState({ user: this.props.user })\r\n\r\n    }\r\n\r\n\r\n    handleChange = (ev) => {\r\n        const { name, value } = ev.target\r\n        const { user } = this.state;\r\n        const userCopy = { ...user };\r\n        userCopy[name] = value;\r\n        this.setState({ user: userCopy })\r\n    }\r\n\r\n    onTriggerMsg = (txt) => {\r\n        this.setState({ triggerMsg: txt }, () => {\r\n            setTimeout(() => {\r\n                this.setState({ triggerMsg: '' });\r\n            }, 1500);\r\n        });\r\n    }\r\n\r\n    uploadImg = (ev) => {\r\n        if (!ev.target.files[0]) return\r\n        this.setState({ isLoading: true }, async () => {\r\n            const imgUrl = await cloudinaryService.uploadImg(ev.target.files[0]);\r\n            const userCopy = { ...this.state.user };\r\n            userCopy[\"imgUrl\"] = imgUrl;\r\n            this.setState({ user: userCopy, isLoading: false });\r\n        })\r\n    }\r\n\r\n    onUpdateProfile = async (ev) => {\r\n        ev.preventDefault();\r\n        const { user, isLoading } = this.state;\r\n        if (isLoading) return this.onTriggerMsg('Please wait for loading your image')\r\n        if (!user.fullname || !user.email) {\r\n            this.onTriggerMsg('Please fill required fields');\r\n            return;\r\n        }\r\n        if (user.tel) {\r\n            const isTelValid = this.validatePhoneNumber(user.tel)\r\n            if (!isTelValid) {\r\n                this.onTriggerMsg('Enter valid phone number');\r\n                return;\r\n            }\r\n        }\r\n        await this.props.updateUser(user);\r\n        this.onTriggerMsg('Profile updated successfully!');\r\n    }\r\n    //    {!isLoading ? <h3>{user.imgUrl ? 'Change' : 'Upload'}</h3>\r\n    //                             : <h3>Loading</h3>}\r\n    //                     </div>\r\n    render() {\r\n        const { user, triggerMsg, isLoading } = this.state;\r\n        return <div className=\"update-profile-container\">\r\n            <div className=\"update-profile-inner-container\">\r\n                <form onSubmit={this.onUpdateProfile}>\r\n                    {!isLoading ? <div className={isLoading ? 'loading-img' : ''}>\r\n                        <label>{user.imgUrl ? <div className=\"user-hover relative\">\r\n                            <img className={`user-thumbnail ${isLoading ? 'loading-img' : ''}`} src={user.imgUrl} alt=\"profile\" />\r\n                            <h3 className={isLoading ? 'loading' : ''} >{isLoading ? 'Loading' : 'Change'} </h3>\r\n                        </div> :\r\n\r\n                            <div className=\"user-hover relative\">\r\n                                <span className={`user-thumbnail ${isLoading ? 'loading-img' : ''}`}>{utilService.getNameInitials(user.fullname)}</span>\r\n\r\n                                <h3 className={isLoading && !user.imgUrl ? 'loading' : ''} >{isLoading ? 'Loading' : 'Upload'} </h3>\r\n                            </div>\r\n                        }\r\n                            <input onChange={this.uploadImg} type=\"file\" />\r\n\r\n\r\n                        </label>\r\n                    </div> :\r\n                        <div className=\"user-thumbnail loader-img-container\" style={{ filter: 'unset' }}>\r\n                            <img className=\"loader-img\" src=\"https://i.gifer.com/7SMw.gif\" />\r\n                        </div>}\r\n                    <div>\r\n                        <label aria-required htmlFor=\"full-name\">Full name</label>\r\n                        <input value={user.fullname || ''} onChange={this.handleChange} type=\"text\" placeholder=\"Full name\" name=\"fullname\" id=\"full-name\" />\r\n                    </div>\r\n                    <div>\r\n                        <label htmlFor=\"date-of-birth\">Date of birth</label>\r\n                        <input value={user.dateofbirth || ''} onChange={this.handleChange} type=\"date\" name=\"dateOfBirth\" id=\"date-of-birth\" />\r\n                    </div>\r\n                    <div>\r\n                        <label aria-required htmlFor=\"email\">email</label>\r\n                        <input value={user.email || ''} onChange={this.handleChange} type=\"email\" placeholder=\"Email\" name=\"email\" id=\"email\" />\r\n                    </div>\r\n                    <div>\r\n                        <label htmlFor=\"tel\">Phone number</label>\r\n                        <input value={user.tel || ''} onChange={this.handleChange} type=\"tel\" placeholder=\"Phone number\" name=\"tel\" id=\"tel\" />\r\n                    </div>\r\n                    {triggerMsg && <h4>{triggerMsg}</h4>}\r\n                    <button type=\"submit\">Update profile</button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n\r\n\r\n\r\nconst mapGlobalStateToProps = (state) => {\r\n    return {\r\n        user: state.userReducer.loggedInUser,\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    updateUser\r\n}\r\n\r\n\r\nexport const UpdateProfile = connect(mapGlobalStateToProps, mapDispatchToProps)(_UpdateProfile);\r\n\r\n\r\n\r\n","import React, { Component, useEffect, useMemo, useState } from 'react'\r\nimport { connect, useSelector } from 'react-redux'\r\nimport { Link, Redirect, Route } from 'react-router-dom'\r\nimport { MainSideBar } from '../../cmps/MainSideBar'\r\nimport { GeneralUserInfo } from '../../cmps/user/GeneralUserInfo'\r\nimport { UpdateProfile } from '../../cmps/user/UpdateProfile'\r\nimport { utilService } from '../../services/utilService'\r\nimport { logOut } from '../../store/actions/userAction'\r\nimport ArrowBackOutlinedIcon from '@material-ui/icons/ArrowBackOutlined';\r\nimport { boardService } from '../../services/boardService'\r\nimport { userService } from '../../services/userService'\r\nimport { useGetUser } from '../../custom-hooks/useGetUser'\r\nimport { Loader } from '../../assets/img/Loader'\r\n\r\n\r\nexport const _UserProfile = ({ logOut, loggedInUser, history, match }) => {\r\n\r\n    let user = useGetUser(match.params.userId)\r\n    const [boards, setBoards] = useState(null)\r\n    const [isMyProfile, setIsMyProfile] = useState(false)\r\n    const board = useSelector((state) => state.boardReducer.board)\r\n\r\n    useEffect(() => {\r\n        if (!loggedInUser) {\r\n            history.push('/')\r\n            return\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        (async function () {\r\n            if (user) {\r\n                const boards = await boardService.query(user._id);\r\n                setBoards(boards)\r\n                if (loggedInUser._id === user._id) setIsMyProfile(true)\r\n            }\r\n        })()\r\n    }, [user])\r\n\r\n    if (!loggedInUser || !board) return <Redirect exact to=\"/\" />\r\n    if (!user || !boards) return <Loader />\r\n    user = user._id === loggedInUser._id ? loggedInUser : user\r\n    return (\r\n        <div>\r\n            <div className=\"user-profile-main-container\">\r\n                <MainSideBar onLogOut={logOut} user={loggedInUser} />\r\n                <div className=\"user-profile-panel\">\r\n                    <div className=\"user-profile-header\">\r\n                        <Link to={`/board/${board._id}`} className=\"link\"><ArrowBackOutlinedIcon /></Link>\r\n                        <span className=\"user-profile-initials\">\r\n                            {\r\n                                user.imgUrl ? <img src={user.imgUrl} alt=\"profile\" /> :\r\n                                    utilService.getNameInitials(user.fullname)\r\n                            }\r\n                        </span>\r\n                        <h3>{`${isMyProfile ? 'Hello,' : ''}`} <b>{user.fullname}</b></h3>\r\n                        {isMyProfile && <div className=\"user-profile-tabs\">\r\n                            <Link to={`${match.url}/general`} className=\"link\">General</Link>\r\n                            <Link to={`${match.url}/update_profile`} className=\"link\">Update profile</Link>\r\n                        </div>}\r\n                    </div>\r\n                    <div className=\"user-profile-content\">\r\n                        <Route path={`${match.path}/general`} render={(props) => {\r\n                            return <GeneralUserInfo user={user} {...props} />\r\n                        }} />\r\n                        <Route path={`${match.path}/update_profile`} render={(props) => {\r\n                            return <UpdateProfile  {...props} />\r\n                        }} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapGlobalStateToProps = (state) => {\r\n    return {\r\n        loggedInUser: state.userReducer.loggedInUser,\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    logOut,\r\n}\r\n\r\n\r\nexport const UserProfile = connect(mapGlobalStateToProps, mapDispatchToProps)(_UserProfile);\r\n\r\n\r\n\r\n","import { HashRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport './assets/styles/main.scss'\r\nimport { Login } from \"./cmps/Login\";\r\nimport { SignUp } from \"./cmps/SignUp\";\r\nimport { BoardApp } from \"./pages/BoardApp\";\r\nimport { Home } from \"./pages/Home\";\r\nimport { UserProfile } from \"./pages/user/UserProfile\";\r\n\r\n\r\n\r\nexport function App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Switch>\r\n        <Route path=\"/board/:boardId\" component={BoardApp} />\r\n        <Route path=\"/user/:userId\" component={UserProfile} />\r\n        <Route path=\"/board\" component={BoardApp} />\r\n        <Route exact path=\"/login\" component={Login} />\r\n        <Route exact path=\"/signUp\" component={SignUp} />\r\n        <Route exact path=\"/\" component={Home} />\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n","import { userService } from \"../../services/userService\";\r\nconst initialState = {\r\n    users: [],\r\n    loggedInUser: userService.getLoggedinUser(),\r\n    msg: '',\r\n}\r\nexport function userReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'SET_LOGGED_IN_USER':\r\n            return { ...state, loggedInUser: action.user }\r\n        case 'LOG_OUT':\r\n            return { ...state, loggedInUser: null }\r\n        case 'SET_MSG':\r\n            return { ...state, msg: action.msg }\r\n        case 'CLEAR_MSG':\r\n            return { ...state, msg: null }\r\n        default:\r\n            return state\r\n    }\r\n}","const initialState = {\r\n    boards: [],\r\n    board: null,\r\n    onDrag: false,\r\n    boardMembers: [],\r\n    isLoading: true,\r\n    isScroll: false\r\n}\r\nexport function boardReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'SET_BOARDS':\r\n            return { ...state, boards: action.boards }\r\n        case 'SET_BOARD_MEMBERS':\r\n            return { ...state, boardMembers: action.members }\r\n        case 'SET_CURR_BOARD':\r\n            return { ...state, board: action.board }\r\n        case 'UPDATE_BOARDS':\r\n            return {\r\n                ...state, boards: state.boards.map(board => board._id === action.board._id ? action.board : board),\r\n                board: action.board\r\n            }\r\n\r\n        case 'ADD_BOARD':\r\n            return { ...state, boards: [...state.boards, action.board] }\r\n        case 'REMOVE_BOARD':\r\n            return { ...state, boards: state.boards.filter(board => board._id !== action.boardId) }\r\n        case 'ON_DRAG':\r\n            return { ...state, onDrag: true }\r\n        case 'ON_DRAG_END':\r\n            return { ...state, onDrag: false }\r\n        case 'SET_LOADING':\r\n            return { ...state, isLoading: action.isLoading }\r\n        case 'GROUP_SCROLL':\r\n            return { ...state, isScroll: action.isScroll }\r\n        default:\r\n            return state\r\n    }\r\n}","import { applyMiddleware, combineReducers, compose, createStore } from 'redux'\r\nimport thunk from 'redux-thunk'\r\n\r\nimport {userReducer} from './reducers/userReducer.js'\r\nimport {boardReducer} from './reducers/boardReducer.js'\r\nconst rootReducer = combineReducers({\r\n  boardReducer,\r\n  userReducer\r\n})\r\n\r\n\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\r\n\r\n// window.theStore = store;\r\n// store.subscribe(() => {\r\n//     console.log('State is:',store.getState())\r\n// })","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { App } from './App.jsx';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './store/store.js'\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.unregister();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}